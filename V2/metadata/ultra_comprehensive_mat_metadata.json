{
  "category": "MAT",
  "operatorCount": 22,
  "totalParameters": 474,
  "lastUpdated": "2025-08-01T23:56:21.620Z",
  "operators": [
    {
      "name": "Constant",
      "fullName": "Constant MAT",
      "category": "MAT",
      "description": "The Constant MAT renders a constant color on a material.\n\nconstantMAT_Class\n\nRefer to the  Deform Article for more information on doing deforms in TouchDesigner.\n\nBlending is summing the color value of the pixel being drawn and the pixel currently present in the Color-Buffer. Blending is typically used to simulate Transparency.\n\t\tThe blending equation is:\n\t\tFinal Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)\n\nDepth-Testing is comparing the depth value of the pixel being drawn with the pixel currently in the Frame-Buffer. A pixel that is determined to be in-front of the pixel currently in the Frame-Buffer will be drawn over it. Pixels that are determined to be behind the pixel currently in the Frame-Buffer will not be drawn. Depth-Testing allows geometry in a 3D scene to occlude geometry behind it, and be occluded by geometry in-front of it regardless of the order the geometry was drawn.\n\nFor a more detailed description of Depth-Testing, refer to the Depth-Test article.\n\nAlpha-testing allows you to choose to draw or not draw a pixel based on its alpha value.\n\nThe wire-frame feature will render the geometry as wire-frame, using the actual primitive type used in the render. What this means is surfaces like Metaballs, NURBs and Beziers will become a wire-frame of the triangles/triangle-strips used to render them (since these types of primitives can't be natively rendered in OpenGL).\n\nThe cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.\n\nThis feature pushes the polygons back into space a tiny fraction. This is useful when you are rendering two polygons directly on-top of each other and are experiencing Z-Fighting. Refer to Polygon Depth Offset for more information. This is also an important feature when doing shadows.\n\nExtra Information for the Constant MAT can be accessed via an Info CHOP.\n\nTouchDesigner Build: Latest\\nwikieditorwikieditor2022.241402021.100002018.28070before 2018.28070",
      "parameters": [
        {
          "name": "applyprojmaps",
          "label": "Applyprojmaps",
          "description": "Applyprojmaps parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Constant Page"
        },
        {
          "name": "color",
          "label": "Color",
          "description": "Color parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Constant Page"
        },
        {
          "name": "alpha",
          "label": "Alpha",
          "description": "Alpha parameter",
          "type": "Menu",
          "default": "",
          "range": null,
          "options": [
            {
              "label": "Already",
              "value": "Pre",
              "description": "Multiplied By AlphaÂ alreadypremult -"
            }
          ],
          "section": "Constant Page"
        },
        {
          "name": "applypointcolor",
          "label": "Applypointcolor",
          "description": "Applypointcolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Constant Page"
        },
        {
          "name": "colormap",
          "label": "Colormap",
          "description": "Colormap parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Constant Page"
        },
        {
          "name": "dodeform",
          "label": "Dodeform",
          "description": "Dodeform parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "deformdata",
          "label": "Deformdata",
          "description": "Deformdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "targetsop",
          "label": "Targetsop",
          "description": "Targetsop parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptpath",
          "label": "Pcaptpath",
          "description": "Pcaptpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptdata",
          "label": "Pcaptdata",
          "description": "Pcaptdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "skelrootpath",
          "label": "Skelrootpath",
          "description": "Skelrootpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "mat",
          "label": "Mat",
          "description": "Mat parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        }
      ],
      "inputs": [],
      "outputs": [
        {
          "type": "MAT",
          "description": "MAT output",
          "index": 0
        }
      ],
      "examples": [],
      "tips": [],
      "related": [],
      "codeSnippets": [
        {
          "code": "applyprojmaps",
          "language": "python"
        },
        {
          "code": "applypointcolor",
          "language": "python"
        },
        {
          "code": "colormapextendu",
          "language": "python"
        },
        {
          "code": "colormapextendv",
          "language": "python"
        },
        {
          "code": "colormapextendw",
          "language": "python"
        },
        {
          "code": "colormapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "colormapanisotropy",
          "language": "python"
        },
        {
          "code": "colormapcoord",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "colormapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "skelrootpath",
          "language": "python"
        },
        {
          "code": "Final Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "separatealphafunc",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "blendconstant",
          "language": "python"
        },
        {
          "code": "blendconstantr",
          "language": "python"
        },
        {
          "code": "blendconstantg",
          "language": "python"
        },
        {
          "code": "blendconstantb",
          "language": "python"
        },
        {
          "code": "blendconstanta",
          "language": "python"
        },
        {
          "code": "legacyalphabehavior",
          "language": "python"
        },
        {
          "code": "postmultalpha",
          "language": "python"
        },
        {
          "code": "pointcolorpremult",
          "language": "python"
        },
        {
          "code": "alreadypremult",
          "language": "python"
        },
        {
          "code": "premultinshader",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "depthwriting",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "alphathreshold",
          "language": "python"
        },
        {
          "code": "polygonoffset",
          "language": "python"
        },
        {
          "code": "polygonoffsetfactor",
          "language": "python"
        },
        {
          "code": "polygonoffsetunits",
          "language": "python"
        },
        {
          "code": "/project1/moviein1",
          "language": "python"
        },
        {
          "code": "/geo1/circle1",
          "language": "python"
        }
      ],
      "shortcuts": [],
      "performanceNotes": [
        "The cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.",
        "An Operator Family that creates, composites and modifies images, and reads/writes images and movies to/from files and the network. TOPs run on the graphics card's GPU.",
        "A Operator Family that reads, creates and modifies 3D points, polygons, lines, particles, surfaces, spheres and meatballs. Particles and point clouds are now done primarily on the GPU using TOPs.",
        "The OpenGL (pre-2022) or Vulkan (2022-) code that runs on the GPU and creates rendered images from polygons and textures. A shader is programmed in Text DATs and referenced by a GLSL Material or a GLSL TOP. Shaders are composed of up to three parts: Vertex Shader, Pixel Shader and Compute Shader."
      ],
      "subcategory": "Shaders",
      "useCases": [
        "3D scene visualization",
        "Real-time graphics rendering",
        "Multi-pass rendering workflows",
        "Shadow and reflection generation"
      ],
      "url": "https://docs.derivative.ca/Constant_MAT",
      "scraped": true,
      "scrapedAt": "2025-08-01T23:56:21.114Z",
      "parameterCount": 12
    },
    {
      "name": "Experimental:Constant",
      "fullName": "Experimental:Constant MAT",
      "category": "MAT",
      "description": "The Constant MAT renders a constant color on a material.\n\nconstantMAT_Class\n\nRefer to the  Deform Article for more information on doing deforms in TouchDesigner.\n\nBlending is summing the color value of the pixel being drawn and the pixel currently present in the Color-Buffer. Blending is typically used to simulate Transparency.\n\t\tThe blending equation is:\n\t\tFinal Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)\n\nDepth-Testing is comparing the depth value of the pixel being drawn with the pixel currently in the Frame-Buffer. A pixel that is determined to be in-front of the pixel currently in the Frame-Buffer will be drawn over it. Pixels that are determined to be behind the pixel currently in the Frame-Buffer will not be drawn. Depth-Testing allows geometry in a 3D scene to occlude geometry behind it, and be occluded by geometry in-front of it regardless of the order the geometry was drawn.\n\nFor a more detailed description of Depth-Testing, refer to the Depth-Test article.\n\nAlpha-testing allows you to choose to draw or not draw a pixel based on its alpha value.\n\nThe wire-frame feature will render the geometry as wire-frame, using the actual primitive type used in the render. What this means is surfaces like Metaballs, NURBs and Beziers will become a wire-frame of the triangles/triangle-strips used to render them (since these types of primitives can't be natively rendered in OpenGL).\n\nThe cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.\n\nThis feature pushes the polygons back into space a tiny fraction. This is useful when you are rendering two polygons directly on-top of each other and are experiencing Z-Fighting. Refer to Polygon Depth Offset for more information. This is also an important feature when doing shadows.\n\nExtra Information for the Constant MAT can be accessed via an Info CHOP.\n\nTouchDesigner Build: Latest\\nwikieditorwikieditor",
      "parameters": [
        {
          "name": "applyprojmaps",
          "label": "Applyprojmaps",
          "description": "Applyprojmaps parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Constant Page"
        },
        {
          "name": "color",
          "label": "Color",
          "description": "Color parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Constant Page"
        },
        {
          "name": "alpha",
          "label": "Alpha",
          "description": "Alpha parameter",
          "type": "Menu",
          "default": "",
          "range": null,
          "options": [
            {
              "label": "Already",
              "value": "Pre",
              "description": "Multiplied By AlphaÂ alreadypremult -"
            }
          ],
          "section": "Constant Page"
        },
        {
          "name": "applypointcolor",
          "label": "Applypointcolor",
          "description": "Applypointcolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Constant Page"
        },
        {
          "name": "colormap",
          "label": "Colormap",
          "description": "Colormap parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Constant Page"
        },
        {
          "name": "dodeform",
          "label": "Dodeform",
          "description": "Dodeform parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "deformdata",
          "label": "Deformdata",
          "description": "Deformdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "targetsop",
          "label": "Targetsop",
          "description": "Targetsop parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptpath",
          "label": "Pcaptpath",
          "description": "Pcaptpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptdata",
          "label": "Pcaptdata",
          "description": "Pcaptdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "skelrootpath",
          "label": "Skelrootpath",
          "description": "Skelrootpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "mat",
          "label": "Mat",
          "description": "Mat parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        }
      ],
      "inputs": [],
      "outputs": [
        {
          "type": "MAT",
          "description": "MAT output",
          "index": 0
        }
      ],
      "examples": [],
      "tips": [],
      "related": [],
      "codeSnippets": [
        {
          "code": "applyprojmaps",
          "language": "python"
        },
        {
          "code": "applypointcolor",
          "language": "python"
        },
        {
          "code": "colormapextendu",
          "language": "python"
        },
        {
          "code": "colormapextendv",
          "language": "python"
        },
        {
          "code": "colormapextendw",
          "language": "python"
        },
        {
          "code": "colormapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "colormapanisotropy",
          "language": "python"
        },
        {
          "code": "texturesamplingmode",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "colormapcoord",
          "language": "python"
        },
        {
          "code": "colormapcoordattrib",
          "language": "python"
        },
        {
          "code": "colormapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "skelrootpath",
          "language": "python"
        },
        {
          "code": "Final Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "separatealphafunc",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "blendconstant",
          "language": "python"
        },
        {
          "code": "blendconstantr",
          "language": "python"
        },
        {
          "code": "blendconstantg",
          "language": "python"
        },
        {
          "code": "blendconstantb",
          "language": "python"
        },
        {
          "code": "blendconstanta",
          "language": "python"
        },
        {
          "code": "legacyalphabehavior",
          "language": "python"
        },
        {
          "code": "postmultalpha",
          "language": "python"
        },
        {
          "code": "pointcolorpremult",
          "language": "python"
        },
        {
          "code": "alreadypremult",
          "language": "python"
        },
        {
          "code": "premultinshader",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "depthwriting",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "alphathreshold",
          "language": "python"
        },
        {
          "code": "polygonoffset",
          "language": "python"
        },
        {
          "code": "polygonoffsetfactor",
          "language": "python"
        },
        {
          "code": "polygonoffsetunits",
          "language": "python"
        },
        {
          "code": "/project1/moviein1",
          "language": "python"
        },
        {
          "code": "/geo1/circle1",
          "language": "python"
        }
      ],
      "shortcuts": [],
      "performanceNotes": [
        "The cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.",
        "An Operator Family that creates, composites and modifies images, and reads/writes images and movies to/from files and the network. TOPs run on the graphics card's GPU.",
        "A Operator Family that reads, creates and modifies 3D points, polygons, lines, particles, surfaces, spheres and meatballs. Particles and point clouds are now done primarily on the GPU using TOPs.",
        "The OpenGL (pre-2022) or Vulkan (2022-) code that runs on the GPU and creates rendered images from polygons and textures. A shader is programmed in Text DATs and referenced by a GLSL Material or a GLSL TOP. Shaders are composed of up to three parts: Vertex Shader, Pixel Shader and Compute Shader."
      ],
      "subcategory": "Shaders",
      "useCases": [
        "3D scene visualization",
        "Real-time graphics rendering",
        "Multi-pass rendering workflows",
        "Shadow and reflection generation"
      ],
      "url": "https://docs.derivative.ca/Experimental:Constant_MAT",
      "scraped": true,
      "scrapedAt": "2025-08-01T23:56:21.128Z",
      "parameterCount": 12
    },
    {
      "name": "Depth",
      "fullName": "Depth MAT",
      "category": "MAT",
      "description": "The Depth Only MAT can be used to prevent objects from being drawn by making an invisible barrier in Z.\n\ndepthMAT_Class\n\nRefer to the  Deform Article for more information on doing deforms in TouchDesigner.\n\nBlending is summing the color value of the pixel being drawn and the pixel currently present in the Color-Buffer. Blending is typically used to simulate Transparency.\n\t\tThe blending equation is:\n\t\tFinal Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)\n\nDepth-Testing is comparing the depth value of the pixel being drawn with the pixel currently in the Frame-Buffer. A pixel that is determined to be in-front of the pixel currently in the Frame-Buffer will be drawn over it. Pixels that are determined to be behind the pixel currently in the Frame-Buffer will not be drawn. Depth-Testing allows geometry in a 3D scene to occlude geometry behind it, and be occluded by geometry in-front of it regardless of the order the geometry was drawn.\n\nFor a more detailed description of Depth-Testing, refer to the Depth-Test article.\n\nAlpha-testing allows you to choose to draw or not draw a pixel based on its alpha value.\n\nThe wire-frame feature will render the geometry as wire-frame, using the actual primitive type used in the render. What this means is surfaces like Metaballs, NURBs and Beziers will become a wire-frame of the triangles/triangle-strips used to render them (since these types of primitives can't be natively rendered in OpenGL).\n\nThe cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.\n\nThis feature pushes the polygons back into space a tiny fraction. This is useful when you are rendering two polygons directly on-top of each other and are experiencing Z-Fighting. Refer to Polygon Depth Offset for more information. This is also an important feature when doing shadows.\n\nExtra Information for the Depth MAT can be accessed via an Info CHOP.\n\nTouchDesigner Build: Latest\\n2022.241402021.100002018.28070before 2018.28070",
      "parameters": [
        {
          "name": "dodeform",
          "label": "Dodeform",
          "description": "Dodeform parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "deformdata",
          "label": "Deformdata",
          "description": "Deformdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "targetsop",
          "label": "Targetsop",
          "description": "Targetsop parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptpath",
          "label": "Pcaptpath",
          "description": "Pcaptpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptdata",
          "label": "Pcaptdata",
          "description": "Pcaptdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "skelrootpath",
          "label": "Skelrootpath",
          "description": "Skelrootpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "mat",
          "label": "Mat",
          "description": "Mat parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        }
      ],
      "inputs": [],
      "outputs": [
        {
          "type": "MAT",
          "description": "MAT output",
          "index": 0
        }
      ],
      "examples": [],
      "tips": [],
      "related": [],
      "codeSnippets": [
        {
          "code": "skelrootpath",
          "language": "python"
        },
        {
          "code": "Final Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "separatealphafunc",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "blendconstant",
          "language": "python"
        },
        {
          "code": "blendconstantr",
          "language": "python"
        },
        {
          "code": "blendconstantg",
          "language": "python"
        },
        {
          "code": "blendconstantb",
          "language": "python"
        },
        {
          "code": "blendconstanta",
          "language": "python"
        },
        {
          "code": "legacyalphabehavior",
          "language": "python"
        },
        {
          "code": "postmultalpha",
          "language": "python"
        },
        {
          "code": "pointcolorpremult",
          "language": "python"
        },
        {
          "code": "alreadypremult",
          "language": "python"
        },
        {
          "code": "premultinshader",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "depthwriting",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "alphathreshold",
          "language": "python"
        },
        {
          "code": "polygonoffset",
          "language": "python"
        },
        {
          "code": "polygonoffsetfactor",
          "language": "python"
        },
        {
          "code": "polygonoffsetunits",
          "language": "python"
        },
        {
          "code": "/project1/moviein1",
          "language": "python"
        },
        {
          "code": "/geo1/circle1",
          "language": "python"
        }
      ],
      "shortcuts": [],
      "performanceNotes": [
        "The cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.",
        "A Operator Family that reads, creates and modifies 3D points, polygons, lines, particles, surfaces, spheres and meatballs. Particles and point clouds are now done primarily on the GPU using TOPs.",
        "The OpenGL (pre-2022) or Vulkan (2022-) code that runs on the GPU and creates rendered images from polygons and textures. A shader is programmed in Text DATs and referenced by a GLSL Material or a GLSL TOP. Shaders are composed of up to three parts: Vertex Shader, Pixel Shader and Compute Shader.",
        "An Operator Family that creates, composites and modifies images, and reads/writes images and movies to/from files and the network. TOPs run on the graphics card's GPU."
      ],
      "subcategory": "Effects",
      "useCases": [
        "3D scene visualization",
        "Real-time graphics rendering",
        "Multi-pass rendering workflows",
        "Shadow and reflection generation"
      ],
      "url": "https://docs.derivative.ca/Depth_MAT",
      "scraped": true,
      "scrapedAt": "2025-08-01T23:56:21.033Z",
      "parameterCount": 7
    },
    {
      "name": "GLSL",
      "fullName": "GLSL MAT",
      "category": "MAT",
      "description": "The GLSL MAT allows you to write or import custom materials into TouchDesigner. When there are compile errors in a GLSL shader, a blue/red checkerboard error shader will be displayed.\n\nFor more information on writing a shader, see Write a GLSL Material, and the GLSL Category.\n\nglslMAT_Class\n\nCHOP Uniforms allow you to send CHOP channel data into a GLSL shader as an array. Depending on the array type used, the number of values you can send into the shader may be limited. If you are using Uniform Arrays, you can use the Built-In variable $SYS_GFX_GLSL_MAX_UNIFORMS to get an idea of how many values you can pass to the shader. Current GPUs are vec4 based for uniform arrays, so the maximum array size is $SYS_GFX_GLSL_MAX_UNIFORMS / 4. Other uniforms will take away from this maximum.\t\t\t\nIf you are using Texture Buffers the maximum array size is far bigger, $SYS_GFX_MAX_TEXTURE_BUFFER_SIZE will tell you the max for this. The max for texture buffer is per texture buffer, and having multiple texture buffers does not take away from the max for each array.\n\nRelative Xforms are matrices that will transform points and vectors from one space to another space.\n\nSpecialization Constants can optionally have their values assigned here.\n\nRefer to the  Deform Article for more information on doing deforms in TouchDesigner.\n\nBlending is summing the color value of the pixel being drawn and the pixel currently present in the Color-Buffer. Blending is typically used to simulate Transparency.\n\t\tThe blending equation is:\n\t\tFinal Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)\n\nDepth-Testing is comparing the depth value of the pixel being drawn with the pixel currently in the Frame-Buffer. A pixel that is determined to be in-front of the pixel currently in the Frame-Buffer will be drawn over it. Pixels that are determined to be behind the pixel currently in the Frame-Buffer will not be drawn. Depth-Testing allows geometry in a 3D scene to occlude geometry behind it, and be occluded by geometry in-front of it regardless of the order the geometry was drawn.\n\nFor a more detailed description of Depth-Testing, refer to the Depth-Test article.\n\nAlpha-testing allows you to choose to draw or not draw a pixel based on its alpha value.\n\nThe wire-frame feature will render the geometry as wire-frame, using the actual primitive type used in the render. What this means is surfaces like Metaballs, NURBs and Beziers will become a wire-frame of the triangles/triangle-strips used to render them (since these types of primitives can't be natively rendered in OpenGL).\n\nThe cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.\n\nThis feature pushes the polygons back into space a tiny fraction. This is useful when you are rendering two polygons directly on-top of each other and are experiencing Z-Fighting. Refer to Polygon Depth Offset for more information. This is also an important feature when doing shadows.\n\nExtra Information for the GLSL MAT can be accessed via an Info CHOP.\n\nTouchDesigner Build: Latest\\nwikieditorwikieditorwikieditorwikieditorwikieditorwikieditorwikieditorwikieditorwikieditorwikieditorwikieditorwikieditorwikieditorwikieditorwikieditor2021.100002020.200002018.28070before 2018.28070",
      "parameters": [
        {
          "name": "glslversion",
          "label": "Glslversion",
          "description": "Glslversion parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "predat",
          "label": "Predat",
          "description": "Predat parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "vdat",
          "label": "Vdat",
          "description": "Vdat parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "pdat",
          "label": "Pdat",
          "description": "Pdat parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "loaduniformnames",
          "label": "Loaduniformnames",
          "description": "Loaduniformnames parameter",
          "type": "Str",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "clearuniformnames",
          "label": "Clearuniformnames",
          "description": "Clearuniformnames parameter",
          "type": "Str",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "gdat",
          "label": "Gdat",
          "description": "Gdat parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "inherit",
          "label": "Inherit",
          "description": "Inherit parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "lightingspace",
          "label": "Lightingspace",
          "description": "Lightingspace parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "inprim",
          "label": "Inprim",
          "description": "Inprim parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "outprim",
          "label": "Outprim",
          "description": "Outprim parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "numout",
          "label": "Numout",
          "description": "Numout parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "twocolor",
          "label": "Twocolor",
          "description": "Twocolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "attr",
          "label": "Attr",
          "description": "Attr parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Attributes Page"
        },
        {
          "name": "sampler",
          "label": "Sampler",
          "description": "Sampler parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Samplers Page"
        },
        {
          "name": "vec",
          "label": "Vec",
          "description": "Vec parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Vectors Page"
        },
        {
          "name": "array",
          "label": "Array",
          "description": "Array parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Arrays Page"
        },
        {
          "name": "matrix",
          "label": "Matrix",
          "description": "Matrix parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Matrices Page"
        },
        {
          "name": "rel",
          "label": "Rel",
          "description": "Rel parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Matrices Page"
        },
        {
          "name": "const",
          "label": "Const",
          "description": "Const parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Constants Page"
        },
        {
          "name": "dodeform",
          "label": "Dodeform",
          "description": "Dodeform parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "deformdata",
          "label": "Deformdata",
          "description": "Deformdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "targetsop",
          "label": "Targetsop",
          "description": "Targetsop parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptpath",
          "label": "Pcaptpath",
          "description": "Pcaptpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptdata",
          "label": "Pcaptdata",
          "description": "Pcaptdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "skelrootpath",
          "label": "Skelrootpath",
          "description": "Skelrootpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "mat",
          "label": "Mat",
          "description": "Mat parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        }
      ],
      "inputs": [],
      "outputs": [
        {
          "type": "MAT",
          "description": "MAT output",
          "index": 0
        }
      ],
      "examples": [],
      "tips": [],
      "related": [],
      "codeSnippets": [
        {
          "code": "glslversion",
          "language": "python"
        },
        {
          "code": "loaduniformnames",
          "language": "python"
        },
        {
          "code": "clearuniformnames",
          "language": "python"
        },
        {
          "code": "lightingspace",
          "language": "python"
        },
        {
          "code": "cameraspace",
          "language": "python"
        },
        {
          "code": "TDAttrib_<attribName>()",
          "language": "python"
        },
        {
          "code": "sampler0name",
          "language": "python"
        },
        {
          "code": "sampler0top",
          "language": "python"
        },
        {
          "code": "sampler0extendu",
          "language": "python"
        },
        {
          "code": "sampler0extendv",
          "language": "python"
        },
        {
          "code": "sampler0extendw",
          "language": "python"
        },
        {
          "code": "sampler0filter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "sampler0anisotropy",
          "language": "python"
        },
        {
          "code": "matrix0name",
          "language": "python"
        },
        {
          "code": "matrix0value",
          "language": "python"
        },
        {
          "code": "const0value",
          "language": "python"
        },
        {
          "code": "skelrootpath",
          "language": "python"
        },
        {
          "code": "Final Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "separatealphafunc",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "blendconstant",
          "language": "python"
        },
        {
          "code": "blendconstantr",
          "language": "python"
        },
        {
          "code": "blendconstantg",
          "language": "python"
        },
        {
          "code": "blendconstantb",
          "language": "python"
        },
        {
          "code": "blendconstanta",
          "language": "python"
        },
        {
          "code": "legacyalphabehavior",
          "language": "python"
        },
        {
          "code": "postmultalpha",
          "language": "python"
        },
        {
          "code": "pointcolorpremult",
          "language": "python"
        },
        {
          "code": "alreadypremult",
          "language": "python"
        },
        {
          "code": "premultinshader",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "depthwriting",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "alphathreshold",
          "language": "python"
        },
        {
          "code": "polygonoffset",
          "language": "python"
        },
        {
          "code": "polygonoffsetfactor",
          "language": "python"
        },
        {
          "code": "polygonoffsetunits",
          "language": "python"
        },
        {
          "code": "/geo1/circle1",
          "language": "python"
        },
        {
          "code": "/project1/moviein1",
          "language": "python"
        }
      ],
      "shortcuts": [],
      "performanceNotes": [
        "CHOP Uniforms allow you to send CHOP channel data into a GLSL shader as an array. Depending on the array type used, the number of values you can send into the shader may be limited. If you are using Uniform Arrays, you can use the Built-In variable $SYS_GFX_GLSL_MAX_UNIFORMS to get an idea of how many values you can pass to the shader. Current GPUs are vec4 based for uniform arrays, so the maximum array size is $SYS_GFX_GLSL_MAX_UNIFORMS / 4. Other uniforms will take away from this maximum.\t\t\t\nIf you are using Texture Buffers the maximum array size is far bigger, $SYS_GFX_MAX_TEXTURE_BUFFER_SIZE will tell you the max for this. The max for texture buffer is per texture buffer, and having multiple texture buffers does not take away from the max for each array.",
        "The cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.",
        "The OpenGL (pre-2022) or Vulkan (2022-) code that runs on the GPU and creates rendered images from polygons and textures. A shader is programmed in Text DATs and referenced by a GLSL Material or a GLSL TOP. Shaders are composed of up to three parts: Vertex Shader, Pixel Shader and Compute Shader.",
        "An Operator Family that creates, composites and modifies images, and reads/writes images and movies to/from files and the network. TOPs run on the graphics card's GPU.",
        "A Operator Family that reads, creates and modifies 3D points, polygons, lines, particles, surfaces, spheres and meatballs. Particles and point clouds are now done primarily on the GPU using TOPs."
      ],
      "subcategory": "GLSL",
      "useCases": [
        "3D scene visualization",
        "Real-time graphics rendering",
        "Multi-pass rendering workflows",
        "Shadow and reflection generation",
        "Image positioning and scaling",
        "Rotation and skew operations"
      ],
      "url": "https://docs.derivative.ca/GLSL_MAT",
      "scraped": true,
      "scrapedAt": "2025-08-01T23:56:21.057Z",
      "parameterCount": 27
    },
    {
      "name": "Experimental:GLSL",
      "fullName": "Experimental:GLSL MAT",
      "category": "MAT",
      "description": "The GLSL MAT allows you to write or import custom materials into TouchDesigner. When there are compile errors in a GLSL shader, a blue/red checkerboard error shader will be displayed.\n\nFor more information on writing a shader, see Write a GLSL Material, and the GLSL Category.\n\nglslMAT_Class\n\nCHOP Uniforms allow you to send CHOP channel data into a GLSL shader as an array. Depending on the array type used, the number of values you can send into the shader may be limited. If you are using Uniform Arrays, you can use the Built-In variable $SYS_GFX_GLSL_MAX_UNIFORMS to get an idea of how many values you can pass to the shader. Current GPUs are vec4 based for uniform arrays, so the maximum array size is $SYS_GFX_GLSL_MAX_UNIFORMS / 4. Other uniforms will take away from this maximum.\t\t\t\nIf you are using Texture Buffers the maximum array size is far bigger, $SYS_GFX_MAX_TEXTURE_BUFFER_SIZE will tell you the max for this. The max for texture buffer is per texture buffer, and having multiple texture buffers does not take away from the max for each array.\n\nRelative Xforms are matrices that will transform points and vectors from one space to another space.\n\nSpecialization Constants can optionally have their values assigned here.\n\nRefer to the  Deform Article for more information on doing deforms in TouchDesigner.\n\nBlending is summing the color value of the pixel being drawn and the pixel currently present in the Color-Buffer. Blending is typically used to simulate Transparency.\n\t\tThe blending equation is:\n\t\tFinal Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)\n\nDepth-Testing is comparing the depth value of the pixel being drawn with the pixel currently in the Frame-Buffer. A pixel that is determined to be in-front of the pixel currently in the Frame-Buffer will be drawn over it. Pixels that are determined to be behind the pixel currently in the Frame-Buffer will not be drawn. Depth-Testing allows geometry in a 3D scene to occlude geometry behind it, and be occluded by geometry in-front of it regardless of the order the geometry was drawn.\n\nFor a more detailed description of Depth-Testing, refer to the Depth-Test article.\n\nAlpha-testing allows you to choose to draw or not draw a pixel based on its alpha value.\n\nThe wire-frame feature will render the geometry as wire-frame, using the actual primitive type used in the render. What this means is surfaces like Metaballs, NURBs and Beziers will become a wire-frame of the triangles/triangle-strips used to render them (since these types of primitives can't be natively rendered in OpenGL).\n\nThe cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.\n\nThis feature pushes the polygons back into space a tiny fraction. This is useful when you are rendering two polygons directly on-top of each other and are experiencing Z-Fighting. Refer to Polygon Depth Offset for more information. This is also an important feature when doing shadows.\n\nExtra Information for the GLSL MAT can be accessed via an Info CHOP.",
      "parameters": [
        {
          "name": "glslversion",
          "label": "Glslversion",
          "description": "Glslversion parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "predat",
          "label": "Predat",
          "description": "Predat parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "vdat",
          "label": "Vdat",
          "description": "Vdat parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "pdat",
          "label": "Pdat",
          "description": "Pdat parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "loaduniformnames",
          "label": "Loaduniformnames",
          "description": "Loaduniformnames parameter",
          "type": "Str",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "clearuniformnames",
          "label": "Clearuniformnames",
          "description": "Clearuniformnames parameter",
          "type": "Str",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "gdat",
          "label": "Gdat",
          "description": "Gdat parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "inherit",
          "label": "Inherit",
          "description": "Inherit parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "lightingspace",
          "label": "Lightingspace",
          "description": "Lightingspace parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "simplexnoise",
          "label": "Simplexnoise",
          "description": "Simplexnoise parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "inprim",
          "label": "Inprim",
          "description": "Inprim parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "outprim",
          "label": "Outprim",
          "description": "Outprim parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "numout",
          "label": "Numout",
          "description": "Numout parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "twocolor",
          "label": "Twocolor",
          "description": "Twocolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Load Page"
        },
        {
          "name": "attr",
          "label": "Attr",
          "description": "Attr parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Attributes Page"
        },
        {
          "name": "sampler",
          "label": "Sampler",
          "description": "Sampler parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Samplers Page"
        },
        {
          "name": "vec",
          "label": "Vec",
          "description": "Vec parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Vectors Page"
        },
        {
          "name": "array",
          "label": "Array",
          "description": "Array parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Arrays Page"
        },
        {
          "name": "matrix",
          "label": "Matrix",
          "description": "Matrix parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Matrices Page"
        },
        {
          "name": "rel",
          "label": "Rel",
          "description": "Rel parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Matrices Page"
        },
        {
          "name": "const",
          "label": "Const",
          "description": "Const parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Constants Page"
        },
        {
          "name": "dodeform",
          "label": "Dodeform",
          "description": "Dodeform parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "deformdata",
          "label": "Deformdata",
          "description": "Deformdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "targetsop",
          "label": "Targetsop",
          "description": "Targetsop parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptpath",
          "label": "Pcaptpath",
          "description": "Pcaptpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptdata",
          "label": "Pcaptdata",
          "description": "Pcaptdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "skelrootpath",
          "label": "Skelrootpath",
          "description": "Skelrootpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "mat",
          "label": "Mat",
          "description": "Mat parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        }
      ],
      "inputs": [],
      "outputs": [
        {
          "type": "MAT",
          "description": "MAT output",
          "index": 0
        }
      ],
      "examples": [],
      "tips": [],
      "related": [],
      "codeSnippets": [
        {
          "code": "glslversion",
          "language": "python"
        },
        {
          "code": "loaduniformnames",
          "language": "python"
        },
        {
          "code": "clearuniformnames",
          "language": "python"
        },
        {
          "code": "lightingspace",
          "language": "python"
        },
        {
          "code": "cameraspace",
          "language": "python"
        },
        {
          "code": "simplexnoise",
          "language": "python"
        },
        {
          "code": "performance",
          "language": "python"
        },
        {
          "code": "TDAttrib_<attribName>()",
          "language": "python"
        },
        {
          "code": "sampler0name",
          "language": "python"
        },
        {
          "code": "sampler0top",
          "language": "python"
        },
        {
          "code": "sampler0extendu",
          "language": "python"
        },
        {
          "code": "sampler0extendv",
          "language": "python"
        },
        {
          "code": "sampler0extendw",
          "language": "python"
        },
        {
          "code": "sampler0filter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "sampler0anisotropy",
          "language": "python"
        },
        {
          "code": "matrix0name",
          "language": "python"
        },
        {
          "code": "matrix0value",
          "language": "python"
        },
        {
          "code": "const0value",
          "language": "python"
        },
        {
          "code": "skelrootpath",
          "language": "python"
        },
        {
          "code": "Final Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "separatealphafunc",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "blendconstant",
          "language": "python"
        },
        {
          "code": "blendconstantr",
          "language": "python"
        },
        {
          "code": "blendconstantg",
          "language": "python"
        },
        {
          "code": "blendconstantb",
          "language": "python"
        },
        {
          "code": "blendconstanta",
          "language": "python"
        },
        {
          "code": "legacyalphabehavior",
          "language": "python"
        },
        {
          "code": "postmultalpha",
          "language": "python"
        },
        {
          "code": "pointcolorpremult",
          "language": "python"
        },
        {
          "code": "alreadypremult",
          "language": "python"
        },
        {
          "code": "premultinshader",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "depthwriting",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "alphathreshold",
          "language": "python"
        },
        {
          "code": "polygonoffset",
          "language": "python"
        },
        {
          "code": "polygonoffsetfactor",
          "language": "python"
        },
        {
          "code": "polygonoffsetunits",
          "language": "python"
        },
        {
          "code": "/geo1/circle1",
          "language": "python"
        },
        {
          "code": "/project1/moviein1",
          "language": "python"
        }
      ],
      "shortcuts": [],
      "performanceNotes": [
        "PerformanceÂ performance -",
        "CHOP Uniforms allow you to send CHOP channel data into a GLSL shader as an array. Depending on the array type used, the number of values you can send into the shader may be limited. If you are using Uniform Arrays, you can use the Built-In variable $SYS_GFX_GLSL_MAX_UNIFORMS to get an idea of how many values you can pass to the shader. Current GPUs are vec4 based for uniform arrays, so the maximum array size is $SYS_GFX_GLSL_MAX_UNIFORMS / 4. Other uniforms will take away from this maximum.\t\t\t\nIf you are using Texture Buffers the maximum array size is far bigger, $SYS_GFX_MAX_TEXTURE_BUFFER_SIZE will tell you the max for this. The max for texture buffer is per texture buffer, and having multiple texture buffers does not take away from the max for each array.",
        "The cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.",
        "The OpenGL (pre-2022) or Vulkan (2022-) code that runs on the GPU and creates rendered images from polygons and textures. A shader is programmed in Text DATs and referenced by a GLSL Material or a GLSL TOP. Shaders are composed of up to three parts: Vertex Shader, Pixel Shader and Compute Shader.",
        "An Operator Family that creates, composites and modifies images, and reads/writes images and movies to/from files and the network. TOPs run on the graphics card's GPU.",
        "A Operator Family that reads, creates and modifies 3D points, polygons, lines, particles, surfaces, spheres and meatballs. Particles and point clouds are now done primarily on the GPU using TOPs."
      ],
      "subcategory": "GLSL",
      "useCases": [
        "3D scene visualization",
        "Real-time graphics rendering",
        "Multi-pass rendering workflows",
        "Shadow and reflection generation",
        "Image positioning and scaling",
        "Rotation and skew operations"
      ],
      "url": "https://docs.derivative.ca/Experimental:GLSL_MAT",
      "scraped": true,
      "scrapedAt": "2025-08-01T23:56:21.081Z",
      "parameterCount": 28
    },
    {
      "name": "In",
      "fullName": "In MAT",
      "category": "MAT",
      "description": "The In MAT is used to create a  MAT input in a Component. Component inputs are positioned alphanumerically on the left side of the Component.\n\ninMAT_Class\n\nRefer to the  Deform Article for more information on doing deforms in TouchDesigner.\n\nDepth-Testing is comparing the depth value of the pixel being drawn with the pixel currently in the Frame-Buffer. A pixel that is determined to be in-front of the pixel currently in the Frame-Buffer will be drawn over it. Pixels that are determined to be behind the pixel currently in the Frame-Buffer will not be drawn. Depth-Testing allows geometry in a 3D scene to occlude geometry behind it, and be occluded by geometry in-front of it regardless of the order the geometry was drawn.\n\nFor a more detailed description of Depth-Testing, refer to the Depth-Test article.\n\nAlpha-testing allows you to choose to draw or not draw a pixel based on its alpha value.\n\nThe wire-frame feature will render the geometry as wire-frame, using the actual primitive type used in the render. What this means is surfaces like Metaballs, NURBs and Beziers will become a wire-frame of the triangles/triangle-strips used to render them (since these types of primitives can't be natively rendered in OpenGL).\n\nThe cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.\n\nThis feature pushes the polygons back into space a tiny fraction. This is useful when you are rendering two polygons directly on-top of each other and are experiencing Z-Fighting. Refer to Polygon Depth Offset for more information. This is also an important feature when doing shadows.\n\nExtra Information for the In MAT can be accessed via an Info CHOP.\n\nTouchDesigner Build: Latest\\n2021.100002018.28070before 2018.28070",
      "parameters": [
        {
          "name": "label",
          "label": "Label",
          "description": "Label parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "In Page"
        },
        {
          "name": "dodeform",
          "label": "Dodeform",
          "description": "Dodeform parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "deformdata",
          "label": "Deformdata",
          "description": "Deformdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "targetsop",
          "label": "Targetsop",
          "description": "Targetsop parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptpath",
          "label": "Pcaptpath",
          "description": "Pcaptpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptdata",
          "label": "Pcaptdata",
          "description": "Pcaptdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "skelrootpath",
          "label": "Skelrootpath",
          "description": "Skelrootpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "mat",
          "label": "Mat",
          "description": "Mat parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        }
      ],
      "inputs": [
        {
          "type": "MAT",
          "description": "Input 0:  -",
          "index": 0
        }
      ],
      "outputs": [
        {
          "type": "MAT",
          "description": "MAT output",
          "index": 0
        }
      ],
      "examples": [],
      "tips": [],
      "related": [],
      "codeSnippets": [
        {
          "code": "skelrootpath",
          "language": "python"
        },
        {
          "code": "separatealphafunc",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "depthwriting",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "alphathreshold",
          "language": "python"
        },
        {
          "code": "polygonoffset",
          "language": "python"
        },
        {
          "code": "polygonoffsetfactor",
          "language": "python"
        },
        {
          "code": "polygonoffsetunits",
          "language": "python"
        },
        {
          "code": "/project1/moviein1",
          "language": "python"
        },
        {
          "code": "/geo1/circle1",
          "language": "python"
        }
      ],
      "shortcuts": [],
      "performanceNotes": [
        "The cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.",
        "A Operator Family that reads, creates and modifies 3D points, polygons, lines, particles, surfaces, spheres and meatballs. Particles and point clouds are now done primarily on the GPU using TOPs.",
        "An Operator Family that creates, composites and modifies images, and reads/writes images and movies to/from files and the network. TOPs run on the graphics card's GPU."
      ],
      "subcategory": "General",
      "useCases": [
        "3D scene visualization",
        "Real-time graphics rendering",
        "Multi-pass rendering workflows",
        "Shadow and reflection generation"
      ],
      "url": "https://docs.derivative.ca/In_MAT",
      "scraped": true,
      "scrapedAt": "2025-08-01T23:56:21.142Z",
      "parameterCount": 8
    },
    {
      "name": "Line",
      "fullName": "Line MAT",
      "category": "MAT",
      "description": "The Line MAT renders 3D line segments, dots and vectors. The line width and color can be varied based on distance to the camera, using two models: a 1/z dropoff (z = distance from camera), or a near-far distance rolloff model, where you set the width and color at the near and far distances, and you vary three rolloff controls.\n\nFor lines it renders different types of end caps and hinge/joints (round, box, arrow).\nThe light model is flat-shaded (no affect from scene lighting). It draws edges (like polygon edges), points and vectors from points. There are different parameters to control the desired shape, as explained in the Parameter sections.\nIt renders several primitive types: polygons, meshes, NURBS, quads, etc. It also manages closed polygons / open polygons.\n\nYou can render a dot at each point. You can render a vector at each point which uses any attribute, like Normal (N). The points or vectors can have their own colors and alpha.\n\nLine Width is a resolution-independent quantity. A line width of 1 will draw a line that is 1/1000 the width of the image. This is true when used with orthographic cameras and perspective cameras.\n\nTo make the width of a line and its points vary per-point of a SOP, the width can be set by adding a point attribute width on the SOP being rendered. A value of 2 scales the width at that point by 2 times its normal width. New point attributes can be created with the Point SOP Custom page. To affect per-point width and not affect the line width, use the point attribute pscale.\n\nWhen you are animating Ortho Width or Field of View, you may want line widths to adjust more realistically. When the parameter \"Width Affected by FOV/Ortho Width\" is on, the behavior is different: For Ortho cameras, the drawn line width increases when Ortho Width drops below 1, (as if you are zooming into it), and decreases when Ortho Width increases above 1. For Perspective cameras, the drawn line width increases when Field of View drops below 90 degrees, and decreases when Field of View increases above 90 degrees. Note that when the parameter \"Width Affected by FOV/Ortho Width\" is on, lines are still resolution-independent.\n\nIntro article here from Interactive Immersive HQ: new-superpowers-touchdesigners-line-mat/\n\nlineMAT_Class\n\nThis is a general setup page for globally control the shared features of Lines, Points, and Vectors. Every change in this page will affect all the three mentioned types.\n\nRefer to the  Deform Article for more information on doing deforms in TouchDesigner.\n\nBlending is summing the color value of the pixel being drawn and the pixel currently present in the Color-Buffer. Blending is typically used to simulate Transparency.\n\t\tThe blending equation is:\n\t\tFinal Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)\n\nDepth-Testing is comparing the depth value of the pixel being drawn with the pixel currently in the Frame-Buffer. A pixel that is determined to be in-front of the pixel currently in the Frame-Buffer will be drawn over it. Pixels that are determined to be behind the pixel currently in the Frame-Buffer will not be drawn. Depth-Testing allows geometry in a 3D scene to occlude geometry behind it, and be occluded by geometry in-front of it regardless of the order the geometry was drawn.\n\nFor a more detailed description of Depth-Testing, refer to the Depth-Test article.\n\nAlpha-testing allows you to choose to draw or not draw a pixel based on its alpha value.\n\nThe wire-frame feature will render the geometry as wire-frame, using the actual primitive type used in the render. What this means is surfaces like Metaballs, NURBs and Beziers will become a wire-frame of the triangles/triangle-strips used to render them (since these types of primitives can't be natively rendered in OpenGL).\n\nThe cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.\n\nThis feature pushes the polygons back into space a tiny fraction. This is useful when you are rendering two polygons directly on-top of each other and are experiencing Z-Fighting. Refer to Polygon Depth Offset for more information. This is also an important feature when doing shadows.\n\nExtra Information for the Line MAT can be accessed via an Info CHOP.\n\nTouchDesigner Build: Latest\\nwikieditorwikieditor2021.100002019.146502018.28070",
      "parameters": [
        {
          "name": "depthinterpolationmodel",
          "label": "Depthinterpolationmodel",
          "description": "Depthinterpolationmodel parameter",
          "type": "Menu",
          "default": "",
          "range": null,
          "options": null,
          "section": "Setup Page"
        },
        {
          "name": "inversedistanceexponent",
          "label": "Inversedistanceexponent",
          "description": "Inversedistanceexponent parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Setup Page"
        },
        {
          "name": "distancenear",
          "label": "Distancenear",
          "description": "Distancenear parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Setup Page"
        },
        {
          "name": "distancefar",
          "label": "Distancefar",
          "description": "Distancefar parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Setup Page"
        },
        {
          "name": "widthnear",
          "label": "Widthnear",
          "description": "Widthnear parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Setup Page"
        },
        {
          "name": "widthfar",
          "label": "Widthfar",
          "description": "Widthfar parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Setup Page"
        },
        {
          "name": "widthaffectedbyfov",
          "label": "Widthaffectedbyfov",
          "description": "Widthaffectedbyfov parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Setup Page"
        },
        {
          "name": "widthbias",
          "label": "Widthbias",
          "description": "Widthbias parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Setup Page"
        },
        {
          "name": "widthsteepness",
          "label": "Widthsteepness",
          "description": "Widthsteepness parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Setup Page"
        },
        {
          "name": "widthlinearize",
          "label": "Widthlinearize",
          "description": "Widthlinearize parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Setup Page"
        },
        {
          "name": "colorbias",
          "label": "Colorbias",
          "description": "Colorbias parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Setup Page"
        },
        {
          "name": "colorsteepness",
          "label": "Colorsteepness",
          "description": "Colorsteepness parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Setup Page"
        },
        {
          "name": "colorlinearize",
          "label": "Colorlinearize",
          "description": "Colorlinearize parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Setup Page"
        },
        {
          "name": "liftdirection",
          "label": "Liftdirection",
          "description": "Liftdirection parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Setup Page"
        },
        {
          "name": "liftscale",
          "label": "Liftscale",
          "description": "Liftscale parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Setup Page"
        },
        {
          "name": "numptsincircle",
          "label": "Numptsincircle",
          "description": "Numptsincircle parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Setup Page"
        },
        {
          "name": "drawlines",
          "label": "Drawlines",
          "description": "Drawlines parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Line Page"
        },
        {
          "name": "linejointtype",
          "label": "Linejointtype",
          "description": "Linejointtype parameter",
          "type": "Menu",
          "default": "",
          "range": null,
          "options": null,
          "section": "Line Page"
        },
        {
          "name": "miterthreshold",
          "label": "Miterthreshold",
          "description": "Miterthreshold parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Line Page"
        },
        {
          "name": "linestartcaptype",
          "label": "Linestartcaptype",
          "description": "Linestartcaptype parameter",
          "type": "Menu",
          "default": "",
          "range": null,
          "options": null,
          "section": "Line Page"
        },
        {
          "name": "lineendcaptype",
          "label": "Lineendcaptype",
          "description": "Lineendcaptype parameter",
          "type": "Menu",
          "default": "",
          "range": null,
          "options": null,
          "section": "Line Page"
        },
        {
          "name": "lineendtaperstrength",
          "label": "Lineendtaperstrength",
          "description": "Lineendtaperstrength parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Line Page"
        },
        {
          "name": "linenearcolor",
          "label": "Linenearcolor",
          "description": "Linenearcolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Line Page"
        },
        {
          "name": "linenearalpha",
          "label": "Linenearalpha",
          "description": "Linenearalpha parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Line Page"
        },
        {
          "name": "specifylinefarcolor",
          "label": "Specifylinefarcolor",
          "description": "Specifylinefarcolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Line Page"
        },
        {
          "name": "linefarcolor",
          "label": "Linefarcolor",
          "description": "Linefarcolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Line Page"
        },
        {
          "name": "linefaralpha",
          "label": "Linefaralpha",
          "description": "Linefaralpha parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Line Page"
        },
        {
          "name": "drawpoints",
          "label": "Drawpoints",
          "description": "Drawpoints parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Page"
        },
        {
          "name": "pointtype",
          "label": "Pointtype",
          "description": "Pointtype parameter",
          "type": "Menu",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Page"
        },
        {
          "name": "pointsizemultiplier",
          "label": "Pointsizemultiplier",
          "description": "Pointsizemultiplier parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Page"
        },
        {
          "name": "pointnearcolor",
          "label": "Pointnearcolor",
          "description": "Pointnearcolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Page"
        },
        {
          "name": "pointnearalpha",
          "label": "Pointnearalpha",
          "description": "Pointnearalpha parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Page"
        },
        {
          "name": "specifypointfarcolor",
          "label": "Specifypointfarcolor",
          "description": "Specifypointfarcolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Page"
        },
        {
          "name": "pointfarcolor",
          "label": "Pointfarcolor",
          "description": "Pointfarcolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Page"
        },
        {
          "name": "pointfaralpha",
          "label": "Pointfaralpha",
          "description": "Pointfaralpha parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Page"
        },
        {
          "name": "pointliftdirection",
          "label": "Pointliftdirection",
          "description": "Pointliftdirection parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Page"
        },
        {
          "name": "pointliftscale",
          "label": "Pointliftscale",
          "description": "Pointliftscale parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Page"
        },
        {
          "name": "drawvectors",
          "label": "Drawvectors",
          "description": "Drawvectors parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Vector Page"
        },
        {
          "name": "scale",
          "label": "Scale",
          "description": "Scale parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Vector Page"
        },
        {
          "name": "vectorstartcaptype",
          "label": "Vectorstartcaptype",
          "description": "Vectorstartcaptype parameter",
          "type": "Menu",
          "default": "",
          "range": null,
          "options": null,
          "section": "Vector Page"
        },
        {
          "name": "vectorendcaptype",
          "label": "Vectorendcaptype",
          "description": "Vectorendcaptype parameter",
          "type": "Menu",
          "default": "",
          "range": null,
          "options": null,
          "section": "Vector Page"
        },
        {
          "name": "vectortaperstrength",
          "label": "Vectortaperstrength",
          "description": "Vectortaperstrength parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Vector Page"
        },
        {
          "name": "vectornearcolor",
          "label": "Vectornearcolor",
          "description": "Vectornearcolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Vector Page"
        },
        {
          "name": "vectornearalpha",
          "label": "Vectornearalpha",
          "description": "Vectornearalpha parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Vector Page"
        },
        {
          "name": "specifyvectorfarcolor",
          "label": "Specifyvectorfarcolor",
          "description": "Specifyvectorfarcolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Vector Page"
        },
        {
          "name": "vectorfarcolor",
          "label": "Vectorfarcolor",
          "description": "Vectorfarcolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Vector Page"
        },
        {
          "name": "vectorfaralpha",
          "label": "Vectorfaralpha",
          "description": "Vectorfaralpha parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Vector Page"
        },
        {
          "name": "roundwidth",
          "label": "Roundwidth",
          "description": "Roundwidth parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Caps Page"
        },
        {
          "name": "roundheight",
          "label": "Roundheight",
          "description": "Roundheight parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Caps Page"
        },
        {
          "name": "squarewidth",
          "label": "Squarewidth",
          "description": "Squarewidth parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Caps Page"
        },
        {
          "name": "squareheight",
          "label": "Squareheight",
          "description": "Squareheight parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Caps Page"
        },
        {
          "name": "trianglewidth",
          "label": "Trianglewidth",
          "description": "Trianglewidth parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Caps Page"
        },
        {
          "name": "triangleheight",
          "label": "Triangleheight",
          "description": "Triangleheight parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Caps Page"
        },
        {
          "name": "arrowwidth",
          "label": "Arrowwidth",
          "description": "Arrowwidth parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Caps Page"
        },
        {
          "name": "arrowheight",
          "label": "Arrowheight",
          "description": "Arrowheight parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Caps Page"
        },
        {
          "name": "arrowtaillength",
          "label": "Arrowtaillength",
          "description": "Arrowtaillength parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Caps Page"
        },
        {
          "name": "endcapwidthmultiplier",
          "label": "Endcapwidthmultiplier",
          "description": "Endcapwidthmultiplier parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Caps Page"
        },
        {
          "name": "endcapheightmultiplier",
          "label": "Endcapheightmultiplier",
          "description": "Endcapheightmultiplier parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Caps Page"
        },
        {
          "name": "startcappullback",
          "label": "Startcappullback",
          "description": "Startcappullback parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Caps Page"
        },
        {
          "name": "endcappullback",
          "label": "Endcappullback",
          "description": "Endcappullback parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Caps Page"
        },
        {
          "name": "lineposatt",
          "label": "Lineposatt",
          "description": "Lineposatt parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Attributes Page"
        },
        {
          "name": "linewidthatt",
          "label": "Linewidthatt",
          "description": "Linewidthatt parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Attributes Page"
        },
        {
          "name": "linecoloratt",
          "label": "Linecoloratt",
          "description": "Linecoloratt parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Attributes Page"
        },
        {
          "name": "pointposatt",
          "label": "Pointposatt",
          "description": "Pointposatt parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Attributes Page"
        },
        {
          "name": "pointsizeatt",
          "label": "Pointsizeatt",
          "description": "Pointsizeatt parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Attributes Page"
        },
        {
          "name": "pointcoloratt",
          "label": "Pointcoloratt",
          "description": "Pointcoloratt parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Attributes Page"
        },
        {
          "name": "vectoratttype",
          "label": "Vectoratttype",
          "description": "Vectoratttype parameter",
          "type": "Menu",
          "default": "",
          "range": null,
          "options": null,
          "section": "Attributes Page"
        },
        {
          "name": "vectoratt",
          "label": "Vectoratt",
          "description": "Vectoratt parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Attributes Page"
        },
        {
          "name": "vectorcusattribidx",
          "label": "Vectorcusattribidx",
          "description": "Vectorcusattribidx parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Attributes Page"
        },
        {
          "name": "dodeform",
          "label": "Dodeform",
          "description": "Dodeform parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "deformdata",
          "label": "Deformdata",
          "description": "Deformdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "targetsop",
          "label": "Targetsop",
          "description": "Targetsop parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptpath",
          "label": "Pcaptpath",
          "description": "Pcaptpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptdata",
          "label": "Pcaptdata",
          "description": "Pcaptdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "skelrootpath",
          "label": "Skelrootpath",
          "description": "Skelrootpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "mat",
          "label": "Mat",
          "description": "Mat parameter",
          "type": "Menu",
          "default": "",
          "range": null,
          "options": [
            {
              "label": "S Curve",
              "value": "scurve",
              "description": "a bounded range for the width between the near and far planes (Distance Near and Far) that uses S Curve for a more dramatic and yet smooth (referring to the continuity of the curve) changes. The curve shape can be controlled by Bias, Steepness, and Linearize parameters."
            }
          ],
          "section": "Deform Page"
        }
      ],
      "inputs": [],
      "outputs": [
        {
          "type": "MAT",
          "description": "MAT output",
          "index": 0
        }
      ],
      "examples": [],
      "tips": [],
      "related": [],
      "codeSnippets": [
        {
          "code": "depthinterpolationmodel",
          "language": "python"
        },
        {
          "code": "inversedistance",
          "language": "python"
        },
        {
          "code": "inversedistanceexponent",
          "language": "python"
        },
        {
          "code": "distancenear",
          "language": "python"
        },
        {
          "code": "distancefar",
          "language": "python"
        },
        {
          "code": "widthaffectedbyfov",
          "language": "python"
        },
        {
          "code": "widthsteepness",
          "language": "python"
        },
        {
          "code": "widthlinearize",
          "language": "python"
        },
        {
          "code": "colorsteepness",
          "language": "python"
        },
        {
          "code": "colorlinearize",
          "language": "python"
        },
        {
          "code": "liftdirection",
          "language": "python"
        },
        {
          "code": "alongcamerazaxis",
          "language": "python"
        },
        {
          "code": "alongnormal",
          "language": "python"
        },
        {
          "code": "towardcamera",
          "language": "python"
        },
        {
          "code": "numptsincircle",
          "language": "python"
        },
        {
          "code": "linejointtype",
          "language": "python"
        },
        {
          "code": "miterthreshold",
          "language": "python"
        },
        {
          "code": "linestartcaptype",
          "language": "python"
        },
        {
          "code": "lineendcaptype",
          "language": "python"
        },
        {
          "code": "lineendtaperstrength",
          "language": "python"
        },
        {
          "code": "linenearcolor",
          "language": "python"
        },
        {
          "code": "linenearcolorr",
          "language": "python"
        },
        {
          "code": "linenearcolorg",
          "language": "python"
        },
        {
          "code": "linenearcolorb",
          "language": "python"
        },
        {
          "code": "linenearalpha",
          "language": "python"
        },
        {
          "code": "specifylinefarcolor",
          "language": "python"
        },
        {
          "code": "linefarcolor",
          "language": "python"
        },
        {
          "code": "linefarcolorr",
          "language": "python"
        },
        {
          "code": "linefarcolorg",
          "language": "python"
        },
        {
          "code": "linefarcolorb",
          "language": "python"
        },
        {
          "code": "linefaralpha",
          "language": "python"
        },
        {
          "code": "circlesprite",
          "language": "python"
        },
        {
          "code": "pointsizemultiplier",
          "language": "python"
        },
        {
          "code": "pointnearcolor",
          "language": "python"
        },
        {
          "code": "pointnearcolorr",
          "language": "python"
        },
        {
          "code": "pointnearcolorg",
          "language": "python"
        },
        {
          "code": "pointnearcolorb",
          "language": "python"
        },
        {
          "code": "pointnearalpha",
          "language": "python"
        },
        {
          "code": "specifypointfarcolor",
          "language": "python"
        },
        {
          "code": "pointfarcolor",
          "language": "python"
        },
        {
          "code": "pointfarcolorr",
          "language": "python"
        },
        {
          "code": "pointfarcolorg",
          "language": "python"
        },
        {
          "code": "pointfarcolorb",
          "language": "python"
        },
        {
          "code": "pointfaralpha",
          "language": "python"
        },
        {
          "code": "pointliftdirection",
          "language": "python"
        },
        {
          "code": "towardcamera",
          "language": "python"
        },
        {
          "code": "alongnormal",
          "language": "python"
        },
        {
          "code": "pointliftscale",
          "language": "python"
        },
        {
          "code": "drawvectors",
          "language": "python"
        },
        {
          "code": "vectorstartcaptype",
          "language": "python"
        },
        {
          "code": "vectorendcaptype",
          "language": "python"
        },
        {
          "code": "vectortaperstrength",
          "language": "python"
        },
        {
          "code": "vectornearcolor",
          "language": "python"
        },
        {
          "code": "vectornearcolorr",
          "language": "python"
        },
        {
          "code": "vectornearcolorg",
          "language": "python"
        },
        {
          "code": "vectornearcolorb",
          "language": "python"
        },
        {
          "code": "vectornearalpha",
          "language": "python"
        },
        {
          "code": "specifyvectorfarcolor",
          "language": "python"
        },
        {
          "code": "vectorfarcolor",
          "language": "python"
        },
        {
          "code": "vectorcolorfarr",
          "language": "python"
        },
        {
          "code": "vectorcolorfarg",
          "language": "python"
        },
        {
          "code": "vectorcolorfarb",
          "language": "python"
        },
        {
          "code": "vectorfarcolorr",
          "language": "python"
        },
        {
          "code": "vectorfarcolorg",
          "language": "python"
        },
        {
          "code": "vectorfarcolorb",
          "language": "python"
        },
        {
          "code": "vectorfaralpha",
          "language": "python"
        },
        {
          "code": "roundheight",
          "language": "python"
        },
        {
          "code": "squarewidth",
          "language": "python"
        },
        {
          "code": "squareheight",
          "language": "python"
        },
        {
          "code": "trianglewidth",
          "language": "python"
        },
        {
          "code": "triangleheight",
          "language": "python"
        },
        {
          "code": "arrowheight",
          "language": "python"
        },
        {
          "code": "arrowtaillength",
          "language": "python"
        },
        {
          "code": "endcapwidthmultiplier",
          "language": "python"
        },
        {
          "code": "endcapheightmultiplier",
          "language": "python"
        },
        {
          "code": "startcappullback",
          "language": "python"
        },
        {
          "code": "endcappullback",
          "language": "python"
        },
        {
          "code": "linewidthatt",
          "language": "python"
        },
        {
          "code": "linecoloratt",
          "language": "python"
        },
        {
          "code": "pointposatt",
          "language": "python"
        },
        {
          "code": "pointsizeatt",
          "language": "python"
        },
        {
          "code": "pointcoloratt",
          "language": "python"
        },
        {
          "code": "vectoratttype",
          "language": "python"
        },
        {
          "code": "instanceattribsop",
          "language": "python"
        },
        {
          "code": "instanceattribworld",
          "language": "python"
        },
        {
          "code": "vectorcusattribidx",
          "language": "python"
        },
        {
          "code": "skelrootpath",
          "language": "python"
        },
        {
          "code": "Final Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "separatealphafunc",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "blendconstant",
          "language": "python"
        },
        {
          "code": "blendconstantr",
          "language": "python"
        },
        {
          "code": "blendconstantg",
          "language": "python"
        },
        {
          "code": "blendconstantb",
          "language": "python"
        },
        {
          "code": "blendconstanta",
          "language": "python"
        },
        {
          "code": "legacyalphabehavior",
          "language": "python"
        },
        {
          "code": "postmultalpha",
          "language": "python"
        },
        {
          "code": "pointcolorpremult",
          "language": "python"
        },
        {
          "code": "alreadypremult",
          "language": "python"
        },
        {
          "code": "premultinshader",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "depthwriting",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "alphathreshold",
          "language": "python"
        },
        {
          "code": "polygonoffset",
          "language": "python"
        },
        {
          "code": "polygonoffsetfactor",
          "language": "python"
        },
        {
          "code": "polygonoffsetunits",
          "language": "python"
        },
        {
          "code": "/project1/moviein1",
          "language": "python"
        },
        {
          "code": "/geo1/circle1",
          "language": "python"
        }
      ],
      "shortcuts": [],
      "performanceNotes": [
        "The cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.",
        "A Operator Family that reads, creates and modifies 3D points, polygons, lines, particles, surfaces, spheres and meatballs. Particles and point clouds are now done primarily on the GPU using TOPs.",
        "The OpenGL (pre-2022) or Vulkan (2022-) code that runs on the GPU and creates rendered images from polygons and textures. A shader is programmed in Text DATs and referenced by a GLSL Material or a GLSL TOP. Shaders are composed of up to three parts: Vertex Shader, Pixel Shader and Compute Shader.",
        "An Operator Family that creates, composites and modifies images, and reads/writes images and movies to/from files and the network. TOPs run on the graphics card's GPU."
      ],
      "subcategory": "General",
      "useCases": [
        "3D scene visualization",
        "Real-time graphics rendering",
        "Multi-pass rendering workflows",
        "Shadow and reflection generation"
      ],
      "url": "https://docs.derivative.ca/Line_MAT",
      "scraped": true,
      "scrapedAt": "2025-08-01T23:56:21.177Z",
      "parameterCount": 76
    },
    {
      "name": "MAT",
      "fullName": "MAT",
      "category": "MAT",
      "description": "MATs or Materials are an Operator Family that applies a Shader to a SOP or 3D Geometry Object for rendering textured surfaces with lighting.\n\nMaterial Operators, or MATs, are used to create materials for geometry.  They can be applied to geometry using the Material parameter on the Display page or any Object Components.\n\nThe Phong MAT and GLSL MAT are designed to use TOPs and GLSL programs (pixel and vertex shaders) as inputs to create more advanced shaders.\n\nThe most commonly used MAT is the Phong MAT. The Phong MAT contains a large number of lighting options that allow the users to create some very unique effects.\n\nPhong MAT - applies a phong shader to the geometry. Geometry must have normals for specular shading to work. Geometry must have Texture Coordinates for any applied maps to work (ie Color Map, Bump Map, Specular Map, etc). Geometry can be deformed using the Deform parameter page. The Phong MAT offers other advanced features for Transparency, Rim Lights, and Shadows.\n\nPBR MAT - applies a PBR shader to the geometry. Use in conjunction with an Environment Light COMP. Substance Designer PBR materials can also be used via .sbsar files loaded into the Substance TOP.\n\nLine MAT - renders the geometry edges as lines and points with different geometry.\n\nConstant MAT - this material applies a constant flat color to the geometry. There is no specular shading, ie shading is not affected by the camera or light positions.\n\nPBR MAT - applies a PBR shader to the geometry. Use in conjunction with an Environment Light COMP. Substance Designer PBR materials can also be used via .sbsar files loaded into the Substance TOP.\n\nDepth MAT - can be used to get depth information from the geometry for a depth-pass render. It will not render any color.\n\nGLSL MAT - a powerful material operator which applies Pixel and Vertex GLSL shaders to the geometry. Geometry can be deformed on the GPU using vertex shaders. Geometry must have Texture Coordinates and normals.\n\nPoint Sprite MAT - special material for use with Point Sprite geometry type. The Particle SOP can create point sprites.",
      "parameters": [],
      "inputs": [],
      "outputs": [
        {
          "type": "MAT",
          "description": "MAT output",
          "index": 0
        }
      ],
      "examples": [],
      "tips": [],
      "related": [],
      "codeSnippets": [],
      "shortcuts": [],
      "performanceNotes": [
        "GLSL MAT - a powerful material operator which applies Pixel and Vertex GLSL shaders to the geometry. Geometry can be deformed on the GPU using vertex shaders. Geometry must have Texture Coordinates and normals.",
        "A Operator Family that reads, creates and modifies 3D points, polygons, lines, particles, surfaces, spheres and meatballs. Particles and point clouds are now done primarily on the GPU using TOPs.",
        "The Graphics Processing Unit. This is the high-speed, many-core processor of the graphics card/chip that takes geometry, images and data from the CPU and creates images and processed data."
      ],
      "subcategory": "General",
      "useCases": [
        "3D scene visualization",
        "Real-time graphics rendering",
        "Multi-pass rendering workflows",
        "Shadow and reflection generation"
      ],
      "url": "https://docs.derivative.ca/MAT",
      "scraped": true,
      "scrapedAt": "2025-08-01T23:56:21.182Z",
      "parameterCount": 0
    },
    {
      "name": "Experimental:MAT",
      "fullName": "Experimental:MAT",
      "category": "MAT",
      "description": "Experimental - Skipping Glossary\n\nMATs or Materials are an Operator Family that applies a Shader to a SOP or 3D Geometry Object for rendering textured surfaces with lighting.\n\nMaterial Operators, or MATs, are used to create materials for geometry.  They can be applied to geometry using the Material parameter on the Display page of Object Components.\n\nThe Phong MAT and GLSL MAT are designed to use TOPs and GLSL programs (pixel and vertex shaders) as inputs to create more advanced shaders.\n\nThe most commonly used MAT is the Phong MAT. The Phong MAT contains a large number of lighting options that allow the users to create some very unique effects.\n\nPhong MAT - applies a phong shader to the geometry. Geometry must have normals for specular shading to work. Geometry must have Texture Coordinates for any applied maps to work (ie Color Map, Bump Map, Specular Map, etc). Geometry can be deformed using the Deform parameter page. The Phong MAT offers other advanced features for Transparency, Rim Lights, and Shadows.\n\nPBR MAT - applies a PBR shader to the geometry. Use in conjunction with an Environment Light COMP. Substance Designer PBR materials can also be used via .sbsar files loaded into the Substance TOP.\n\nLine MAT - renders the geometry edges as lines and points with different geometry.\n\nConstant MAT - this material applies a constant flat color to the geometry. There is no specular shading, ie shading is not affected by the camera or light positions.\n\nPBR MAT - applies a PBR shader to the geometry. Use in conjunction with an Environment Light COMP. Substance Designer PBR materials can also be used via .sbsar files loaded into the Substance TOP.\n\nDepth MAT - can be used to get depth information from the geometry for a depth-pass render. It will not render any color.\n\nGLSL MAT - a powerful material operator which applies Pixel and Vertex GLSL shaders to the geometry. Geometry can be deformed on the GPU using vertex shaders. Geometry must have Texture Coordinates and normals.\n\nPoint Sprite MAT - special material for use with Point Sprite geometry type. The Particle SOP can create point sprites.\n\nMAT Class",
      "parameters": [],
      "inputs": [],
      "outputs": [
        {
          "type": "MAT",
          "description": "MAT output",
          "index": 0
        }
      ],
      "examples": [],
      "tips": [],
      "related": [],
      "codeSnippets": [],
      "shortcuts": [],
      "performanceNotes": [
        "GLSL MAT - a powerful material operator which applies Pixel and Vertex GLSL shaders to the geometry. Geometry can be deformed on the GPU using vertex shaders. Geometry must have Texture Coordinates and normals.",
        "A Operator Family that reads, creates and modifies 3D points, polygons, lines, particles, surfaces, spheres and meatballs. Particles and point clouds are now done primarily on the GPU using TOPs.",
        "The Graphics Processing Unit. This is the high-speed, many-core processor of the graphics card/chip that takes geometry, images and data from the CPU and creates images and processed data."
      ],
      "subcategory": "General",
      "useCases": [
        "3D scene visualization",
        "Real-time graphics rendering",
        "Multi-pass rendering workflows",
        "Shadow and reflection generation"
      ],
      "url": "https://docs.derivative.ca/Experimental:MAT",
      "scraped": true,
      "scrapedAt": "2025-08-01T23:56:21.219Z",
      "parameterCount": 0
    },
    {
      "name": "MAT Common Page",
      "fullName": "MAT Common Page",
      "category": "MAT",
      "description": "The MAT Common Page allows you adjust many rendering settings. These settings are completely independent of the shader being used, so they be applied to any shader. Some MATs may require certain rendering features be enabled or disabled to work correctly, in that case the parameters will be disabled for that MAT type.\n\nBlending is summing the color value of the pixel being drawn and the pixel currently present in the Color-Buffer. Blending is typically used to simulate Transparency.\n\nThe blending equation is:\n\nFinal Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)\n\nBlending (Transparency) blending - This toggle enables and disables blending. However see the wiki article Transparency.\n\nSource Color srcblend - This value is multiplied by the color value of the pixel that is being written to the Color-Buffer (also know as the Source Color).\n\nDestination Color destblend - This value is multiplied by the color value of the pixel currently in the Color-Buffer (also known as the Destination Color).\n\nSeparate Alpha Function separatealphafunc - This toggle enables and disables separate blending options for the alpha values.\n\nSource Alpha srcblend - This value is multiplied by the alpha value of the pixel that is being written to the Color-Buffer (also know as the Source Alpha).\n\nDestination Alpha destblend - This value is multiplied by the alpha value of the pixel currently in the Color-Buffer (also known as the Destination Alpha).\n\nDepth-Testing is comparing the depth value of the pixel being drawn with the pixel currently in the Frame-Buffer. A pixel that is determined to be in-front of the pixel currently in the Frame-Buffer will be drawn over it. Pixels that are determined to be behind the pixel currently in the Frame-Buffer will not be drawn. Depth-Testing allows geometry in a 3D scene to occlude geometry behind it, and be occluded by geometry in-front of it regardless of the order the geometry was drawn.\n\nFor a more detailed description of Depth-Testing, refer to the Depth-Test article.\n\nDepth Test depthtest - Enables and disables the Depth-Test. If the depth-test is disabled, depths values aren't written to the Depth-Buffer.\n\nDepth Test Function depthfunc - The depth value of the pixel being drawn is compared to the depth value currently in the depth-buffer using this function. If the test passes then the pixel is drawn to the Frame-Buffer. If the test fails the pixel is discarded and no changes are made to the Frame-Buffer.\n\nWrite Depth Values depthwriting - If Write Depth Values is on, pixels that pass the depth-test will write their depth value to the Depth-Buffer. If this isn't on then no changes will be made to the Depth-Buffer, regardless of if the pixels drawn pass or fail the depth-test.\n\nAlpha-testing allows you to choose to draw or not draw a pixel based on its alpha value.\n\nDiscard Pixels Based On Alpha alphatest - This enables or disables the pixel alpha test.\n\nKeep Pixels with Alpha alphatest - This menu works in conjunction with the Alpha Threshold parameter below in determining which pixels to keep based on their alpha value.\n\nAlpha Threshold alphathreshold - This value is what the pixel's alpha is compared to to determine if the pixel should be drawn. Pixels with alpha greater than the Alpha Threshold will be drawn. Pixels with alpha less than or equal to the Alpha Threshold will not be drawn.\n\nThe wire-frame feature will render the geometry as wire-frame, using the actual primitive type used in the render. What this means is surfaces like Metaballs, NURBs and Beziers will become a wire-frame of the triangles/triangle-strips used to render them (since these types of primitives can't be natively rendered in OpenGL).\n\nWire Frame wireframe - Enables and disables wire-frame rendering with the option of OpenGL Tesselated or Topology based wireframes.\n\nLine Width wirewidth - This value is the width that the wires will be. This value is in pixels.\n\nThe cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.\n\nCull Face cullface - Selects which faces to render.\n\nThis feature pushes the polygons back into space a tiny fraction. This is useful when you are rendering two polygons directly on-top of each other and are experiencing Z-Fighting. Refer to Polygon Depth Offset for more information. This is also an important feature when doing shadows.\n\nPolygon Depth Offset polygonoffset - Turns on the polygon offset feature.\n\nOffset Factor polygonoffsetfactor - Adds an offset to the Z value that depends on how sloped the surface is to the viewer.\n\nOffset Units polygonoffsetunits - Adds a constant offset to the Z value.",
      "parameters": [],
      "inputs": [],
      "outputs": [
        {
          "type": "MAT",
          "description": "MAT output",
          "index": 0
        }
      ],
      "examples": [],
      "tips": [],
      "related": [],
      "codeSnippets": [
        {
          "code": "separatealphafunc",
          "language": "python"
        },
        {
          "code": "depthwriting",
          "language": "python"
        },
        {
          "code": "alphathreshold",
          "language": "python"
        },
        {
          "code": "polygonoffset",
          "language": "python"
        },
        {
          "code": "polygonoffsetfactor",
          "language": "python"
        },
        {
          "code": "polygonoffsetunits",
          "language": "python"
        }
      ],
      "shortcuts": [],
      "performanceNotes": [
        "The cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.",
        "An Operator Family that creates, composites and modifies images, and reads/writes images and movies to/from files and the network. TOPs run on the graphics card's GPU."
      ],
      "subcategory": "General",
      "useCases": [
        "3D scene visualization",
        "Real-time graphics rendering",
        "Multi-pass rendering workflows",
        "Shadow and reflection generation"
      ],
      "url": "https://docs.derivative.ca/MAT_Common_Page",
      "scraped": true,
      "scrapedAt": "2025-08-01T23:56:21.259Z",
      "parameterCount": 0
    },
    {
      "name": "Null",
      "fullName": "Null MAT",
      "category": "MAT",
      "description": "The Null MAT has no effect on the data. It is an instance of the MAT connected to its input. It doesn't do much but comes in handy when building networks.\n\nnullMAT_Class\n\nRefer to the  Deform Article for more information on doing deforms in TouchDesigner.\n\nDepth-Testing is comparing the depth value of the pixel being drawn with the pixel currently in the Frame-Buffer. A pixel that is determined to be in-front of the pixel currently in the Frame-Buffer will be drawn over it. Pixels that are determined to be behind the pixel currently in the Frame-Buffer will not be drawn. Depth-Testing allows geometry in a 3D scene to occlude geometry behind it, and be occluded by geometry in-front of it regardless of the order the geometry was drawn.\n\nFor a more detailed description of Depth-Testing, refer to the Depth-Test article.\n\nAlpha-testing allows you to choose to draw or not draw a pixel based on its alpha value.\n\nThe wire-frame feature will render the geometry as wire-frame, using the actual primitive type used in the render. What this means is surfaces like Metaballs, NURBs and Beziers will become a wire-frame of the triangles/triangle-strips used to render them (since these types of primitives can't be natively rendered in OpenGL).\n\nThe cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.\n\nThis feature pushes the polygons back into space a tiny fraction. This is useful when you are rendering two polygons directly on-top of each other and are experiencing Z-Fighting. Refer to Polygon Depth Offset for more information. This is also an important feature when doing shadows.\n\nExtra Information for the Null MAT can be accessed via an Info CHOP.\n\nTouchDesigner Build: Latest\\n2021.100002018.28070before 2018.28070",
      "parameters": [
        {
          "name": "dodeform",
          "label": "Dodeform",
          "description": "Dodeform parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "deformdata",
          "label": "Deformdata",
          "description": "Deformdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "targetsop",
          "label": "Targetsop",
          "description": "Targetsop parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptpath",
          "label": "Pcaptpath",
          "description": "Pcaptpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptdata",
          "label": "Pcaptdata",
          "description": "Pcaptdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "skelrootpath",
          "label": "Skelrootpath",
          "description": "Skelrootpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "mat",
          "label": "Mat",
          "description": "Mat parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        }
      ],
      "inputs": [
        {
          "type": "MAT",
          "description": "Input 0:  -",
          "index": 0
        }
      ],
      "outputs": [
        {
          "type": "MAT",
          "description": "MAT output",
          "index": 0
        }
      ],
      "examples": [],
      "tips": [],
      "related": [],
      "codeSnippets": [
        {
          "code": "skelrootpath",
          "language": "python"
        },
        {
          "code": "separatealphafunc",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "depthwriting",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "alphathreshold",
          "language": "python"
        },
        {
          "code": "polygonoffset",
          "language": "python"
        },
        {
          "code": "polygonoffsetfactor",
          "language": "python"
        },
        {
          "code": "polygonoffsetunits",
          "language": "python"
        },
        {
          "code": "/project1/moviein1",
          "language": "python"
        },
        {
          "code": "/geo1/circle1",
          "language": "python"
        }
      ],
      "shortcuts": [],
      "performanceNotes": [
        "The cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.",
        "A Operator Family that reads, creates and modifies 3D points, polygons, lines, particles, surfaces, spheres and meatballs. Particles and point clouds are now done primarily on the GPU using TOPs.",
        "An Operator Family that creates, composites and modifies images, and reads/writes images and movies to/from files and the network. TOPs run on the graphics card's GPU."
      ],
      "subcategory": "General",
      "useCases": [
        "3D scene visualization",
        "Real-time graphics rendering",
        "Multi-pass rendering workflows",
        "Shadow and reflection generation"
      ],
      "url": "https://docs.derivative.ca/Null_MAT",
      "scraped": true,
      "scrapedAt": "2025-08-01T23:56:21.247Z",
      "parameterCount": 7
    },
    {
      "name": "Out",
      "fullName": "Out MAT",
      "category": "MAT",
      "description": "The Out MAT is used to create a  MAT output in a Component. Component outputs are positioned alphanumerically on the right side of the Component.\n\noutMAT_Class\n\nRefer to the  Deform Article for more information on doing deforms in TouchDesigner.\n\nBlending is summing the color value of the pixel being drawn and the pixel currently present in the Color-Buffer. Blending is typically used to simulate Transparency.\n\t\tThe blending equation is:\n\t\tFinal Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)\n\nDepth-Testing is comparing the depth value of the pixel being drawn with the pixel currently in the Frame-Buffer. A pixel that is determined to be in-front of the pixel currently in the Frame-Buffer will be drawn over it. Pixels that are determined to be behind the pixel currently in the Frame-Buffer will not be drawn. Depth-Testing allows geometry in a 3D scene to occlude geometry behind it, and be occluded by geometry in-front of it regardless of the order the geometry was drawn.\n\nFor a more detailed description of Depth-Testing, refer to the Depth-Test article.\n\nAlpha-testing allows you to choose to draw or not draw a pixel based on its alpha value.\n\nThe wire-frame feature will render the geometry as wire-frame, using the actual primitive type used in the render. What this means is surfaces like Metaballs, NURBs and Beziers will become a wire-frame of the triangles/triangle-strips used to render them (since these types of primitives can't be natively rendered in OpenGL).\n\nThe cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.\n\nThis feature pushes the polygons back into space a tiny fraction. This is useful when you are rendering two polygons directly on-top of each other and are experiencing Z-Fighting. Refer to Polygon Depth Offset for more information. This is also an important feature when doing shadows.\n\nExtra Information for the Out MAT can be accessed via an Info CHOP.\n\nTouchDesigner Build: Latest\\n2021.100002018.28070before 2018.28070",
      "parameters": [
        {
          "name": "label",
          "label": "Label",
          "description": "Label parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Out Page"
        },
        {
          "name": "dodeform",
          "label": "Dodeform",
          "description": "Dodeform parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "deformdata",
          "label": "Deformdata",
          "description": "Deformdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "targetsop",
          "label": "Targetsop",
          "description": "Targetsop parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptpath",
          "label": "Pcaptpath",
          "description": "Pcaptpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptdata",
          "label": "Pcaptdata",
          "description": "Pcaptdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "skelrootpath",
          "label": "Skelrootpath",
          "description": "Skelrootpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "mat",
          "label": "Mat",
          "description": "Mat parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        }
      ],
      "inputs": [
        {
          "type": "MAT",
          "description": "Input 0:  -",
          "index": 0
        }
      ],
      "outputs": [
        {
          "type": "MAT",
          "description": "MAT output",
          "index": 0
        }
      ],
      "examples": [],
      "tips": [],
      "related": [],
      "codeSnippets": [
        {
          "code": "skelrootpath",
          "language": "python"
        },
        {
          "code": "Final Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "separatealphafunc",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "blendconstant",
          "language": "python"
        },
        {
          "code": "blendconstantr",
          "language": "python"
        },
        {
          "code": "blendconstantg",
          "language": "python"
        },
        {
          "code": "blendconstantb",
          "language": "python"
        },
        {
          "code": "blendconstanta",
          "language": "python"
        },
        {
          "code": "legacyalphabehavior",
          "language": "python"
        },
        {
          "code": "postmultalpha",
          "language": "python"
        },
        {
          "code": "pointcolorpremult",
          "language": "python"
        },
        {
          "code": "alreadypremult",
          "language": "python"
        },
        {
          "code": "premultinshader",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "depthwriting",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "alphathreshold",
          "language": "python"
        },
        {
          "code": "polygonoffset",
          "language": "python"
        },
        {
          "code": "polygonoffsetfactor",
          "language": "python"
        },
        {
          "code": "polygonoffsetunits",
          "language": "python"
        },
        {
          "code": "/project1/moviein1",
          "language": "python"
        },
        {
          "code": "/geo1/circle1",
          "language": "python"
        }
      ],
      "shortcuts": [],
      "performanceNotes": [
        "The cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.",
        "A Operator Family that reads, creates and modifies 3D points, polygons, lines, particles, surfaces, spheres and meatballs. Particles and point clouds are now done primarily on the GPU using TOPs.",
        "The OpenGL (pre-2022) or Vulkan (2022-) code that runs on the GPU and creates rendered images from polygons and textures. A shader is programmed in Text DATs and referenced by a GLSL Material or a GLSL TOP. Shaders are composed of up to three parts: Vertex Shader, Pixel Shader and Compute Shader.",
        "An Operator Family that creates, composites and modifies images, and reads/writes images and movies to/from files and the network. TOPs run on the graphics card's GPU."
      ],
      "subcategory": "General",
      "useCases": [
        "3D scene visualization",
        "Real-time graphics rendering",
        "Multi-pass rendering workflows",
        "Shadow and reflection generation"
      ],
      "url": "https://docs.derivative.ca/Out_MAT",
      "scraped": true,
      "scrapedAt": "2025-08-01T23:56:21.330Z",
      "parameterCount": 8
    },
    {
      "name": "PBR",
      "fullName": "PBR MAT",
      "category": "MAT",
      "description": "The PBR MAT creates a material using a Physically Based Rendering (PBR) lighting model. It has support for textures, reflections, bumps, cone lights, rim lights, alpha maps and more.\n\nIt also supports most Adobe Substance 3D Designer PBR materials loaded in the Substance TOP.\n\nYou can output its GLSL shader into two DATs for further adaptation in a GLSL MAT by using the Output Shader parameter.\n\nThis OP creates physically based materials from texture maps you assign to it and works with any content pipeline whether you use Maya, Houdini, Unreal, Photoshop etc.\n\nYou can get more PBR materials from PBR texture libraries such as Quixel and Poliigon and Game Textures.\nSee also: Substance TOP.\n\npbrMAT_Class\n\nNote: Simply applying alpha to an object does not make it transparent. For more information refer to the Transparency article.\n\nOther rim lights have the same parameters, internal parameter names just have a different number instead of 1.\n\nRefer to the  Deform Article for more information on doing deforms in TouchDesigner.\n\nBlending is summing the color value of the pixel being drawn and the pixel currently present in the Color-Buffer. Blending is typically used to simulate Transparency.\n\t\tThe blending equation is:\n\t\tFinal Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)\n\nDepth-Testing is comparing the depth value of the pixel being drawn with the pixel currently in the Frame-Buffer. A pixel that is determined to be in-front of the pixel currently in the Frame-Buffer will be drawn over it. Pixels that are determined to be behind the pixel currently in the Frame-Buffer will not be drawn. Depth-Testing allows geometry in a 3D scene to occlude geometry behind it, and be occluded by geometry in-front of it regardless of the order the geometry was drawn.\n\nFor a more detailed description of Depth-Testing, refer to the Depth-Test article.\n\nAlpha-testing allows you to choose to draw or not draw a pixel based on its alpha value.\n\nThe wire-frame feature will render the geometry as wire-frame, using the actual primitive type used in the render. What this means is surfaces like Metaballs, NURBs and Beziers will become a wire-frame of the triangles/triangle-strips used to render them (since these types of primitives can't be natively rendered in OpenGL).\n\nThe cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.\n\nThis feature pushes the polygons back into space a tiny fraction. This is useful when you are rendering two polygons directly on-top of each other and are experiencing Z-Fighting. Refer to Polygon Depth Offset for more information. This is also an important feature when doing shadows.\n\nExtra Information for the PBR MAT can be accessed via an Info CHOP.\n\nTouchDesigner Build: Latest\\nwikieditorwikieditorwikieditorwikieditorwikieditorwikieditorwikieditorwikieditormw-rollback2022.241402021.100002020.200002018.28070before 2018.28070",
      "parameters": [
        {
          "name": "basecolor",
          "label": "Basecolor",
          "description": "Basecolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "specularlevel",
          "label": "Specularlevel",
          "description": "Specularlevel parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "metallic",
          "label": "Metallic",
          "description": "Metallic parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "roughness",
          "label": "Roughness",
          "description": "Roughness parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "ambientocclusion",
          "label": "Ambientocclusion",
          "description": "Ambientocclusion parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "envlightquality",
          "label": "Envlightquality",
          "description": "Envlightquality parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "emit",
          "label": "Emit",
          "description": "Emit parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "constant",
          "label": "Constant",
          "description": "Constant parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "frontfacelit",
          "label": "Frontfacelit",
          "description": "Frontfacelit parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "backfacelit",
          "label": "Backfacelit",
          "description": "Backfacelit parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "outputshader",
          "label": "Outputshader",
          "description": "Outputshader parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "substance",
          "label": "Substance",
          "description": "Substance parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "basecolormap",
          "label": "Basecolormap",
          "description": "Basecolormap parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "specularlevelmap",
          "label": "Specularlevelmap",
          "description": "Specularlevelmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "metallicmap",
          "label": "Metallicmap",
          "description": "Metallicmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "roughnessmap",
          "label": "Roughnessmap",
          "description": "Roughnessmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "ambientocclusionmap",
          "label": "Ambientocclusionmap",
          "description": "Ambientocclusionmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "normalmap",
          "label": "Normalmap",
          "description": "Normalmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "bumpscale",
          "label": "Bumpscale",
          "description": "Bumpscale parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "heightmapenable",
          "label": "Heightmapenable",
          "description": "Heightmapenable parameter",
          "type": "Toggle",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "heightmap",
          "label": "Heightmap",
          "description": "Heightmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "parallaxscale",
          "label": "Parallaxscale",
          "description": "Parallaxscale parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "parallaxocclusion",
          "label": "Parallaxocclusion",
          "description": "Parallaxocclusion parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "displaceverts",
          "label": "Displaceverts",
          "description": "Displaceverts parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "displacescale",
          "label": "Displacescale",
          "description": "Displacescale parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "displacemid",
          "label": "Displacemid",
          "description": "Displacemid parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "emitmap",
          "label": "Emitmap",
          "description": "Emitmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "alphamap",
          "label": "Alphamap",
          "description": "Alphamap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Alpha Page"
        },
        {
          "name": "alphamode",
          "label": "Alphamode",
          "description": "Alphamode parameter",
          "type": "Menu",
          "default": "",
          "range": null,
          "options": null,
          "section": "Alpha Page"
        },
        {
          "name": "alphafront",
          "label": "Alphafront",
          "description": "Alphafront parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Alpha Page"
        },
        {
          "name": "alphaside",
          "label": "Alphaside",
          "description": "Alphaside parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Alpha Page"
        },
        {
          "name": "rolloff",
          "label": "Rolloff",
          "description": "Rolloff parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Alpha Page"
        },
        {
          "name": "postmultalpha",
          "label": "Postmultalpha",
          "description": "Postmultalpha parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Alpha Page"
        },
        {
          "name": "rimlight",
          "label": "Rimlight",
          "description": "Rimlight parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Rim Page"
        },
        {
          "name": "shadowstrength",
          "label": "Shadowstrength",
          "description": "Shadowstrength parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "shadowcolor",
          "label": "Shadowcolor",
          "description": "Shadowcolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "darknessemit",
          "label": "Darknessemit",
          "description": "Darknessemit parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "darknessemitcolor",
          "label": "Darknessemitcolor",
          "description": "Darknessemitcolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "darknessemitmap",
          "label": "Darknessemitmap",
          "description": "Darknessemitmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "writecameradepthtoalpha",
          "label": "Writecameradepthtoalpha",
          "description": "Writecameradepthtoalpha parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "applypointcolor",
          "label": "Applypointcolor",
          "description": "Applypointcolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "instancetexture",
          "label": "Instancetexture",
          "description": "Instancetexture parameter",
          "type": "Str",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "color",
          "label": "Color",
          "description": "Color parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "dodeform",
          "label": "Dodeform",
          "description": "Dodeform parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "deformdata",
          "label": "Deformdata",
          "description": "Deformdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "targetsop",
          "label": "Targetsop",
          "description": "Targetsop parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptpath",
          "label": "Pcaptpath",
          "description": "Pcaptpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptdata",
          "label": "Pcaptdata",
          "description": "Pcaptdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "skelrootpath",
          "label": "Skelrootpath",
          "description": "Skelrootpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "mat",
          "label": "Mat",
          "description": "Mat parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        }
      ],
      "inputs": [],
      "outputs": [
        {
          "type": "MAT",
          "description": "MAT output",
          "index": 0
        }
      ],
      "examples": [],
      "tips": [
        "Note: Simply applying alpha to an object does not make it transparent. For more information refer to the Transparency article."
      ],
      "related": [],
      "codeSnippets": [
        {
          "code": "specularlevel",
          "language": "python"
        },
        {
          "code": "ambientocclusion",
          "language": "python"
        },
        {
          "code": "envlightquality",
          "language": "python"
        },
        {
          "code": "frontfacelit",
          "language": "python"
        },
        {
          "code": "backfacelit",
          "language": "python"
        },
        {
          "code": "backfacelit",
          "language": "python"
        },
        {
          "code": "outputshader",
          "language": "python"
        },
        {
          "code": "basecolormap",
          "language": "python"
        },
        {
          "code": "basecolormapextendu",
          "language": "python"
        },
        {
          "code": "basecolormapextendv",
          "language": "python"
        },
        {
          "code": "basecolormapextendw",
          "language": "python"
        },
        {
          "code": "basecolormapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "basecolormapanisotropy",
          "language": "python"
        },
        {
          "code": "texturesamplingmode",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "basecolormapcoord",
          "language": "python"
        },
        {
          "code": "basecolormapcoordattrib",
          "language": "python"
        },
        {
          "code": "basecolormapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "specularlevelmap",
          "language": "python"
        },
        {
          "code": "specularlevelmapextendu",
          "language": "python"
        },
        {
          "code": "specularlevelmapextendv",
          "language": "python"
        },
        {
          "code": "specularlevelmapextendw",
          "language": "python"
        },
        {
          "code": "specularlevelmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "specularlevelmapanisotropy",
          "language": "python"
        },
        {
          "code": "specularlevelmapcoord",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "specularlevelmapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "specularlevelmapchannelsource",
          "language": "python"
        },
        {
          "code": "metallicmap",
          "language": "python"
        },
        {
          "code": "metalnessmapextendu",
          "language": "python"
        },
        {
          "code": "metalnessmapextendv",
          "language": "python"
        },
        {
          "code": "metalnessmapextendw",
          "language": "python"
        },
        {
          "code": "metalnessmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "metalnessmapanisotropy",
          "language": "python"
        },
        {
          "code": "metallicmapcoord",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "metallicmapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "metallicmapchannelsource",
          "language": "python"
        },
        {
          "code": "roughnessmap",
          "language": "python"
        },
        {
          "code": "roughnessmapextendu",
          "language": "python"
        },
        {
          "code": "roughnessmapextendv",
          "language": "python"
        },
        {
          "code": "roughnessmapextendw",
          "language": "python"
        },
        {
          "code": "roughnessmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "roughnessmapanisotropy",
          "language": "python"
        },
        {
          "code": "roughnessmapcoord",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "roughnessmapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "roughnessmapchannelsource",
          "language": "python"
        },
        {
          "code": "ambientocclusionmap",
          "language": "python"
        },
        {
          "code": "ambientocclusionmapextendu",
          "language": "python"
        },
        {
          "code": "ambientocclusionmapextendv",
          "language": "python"
        },
        {
          "code": "ambientocclusionmapextendw",
          "language": "python"
        },
        {
          "code": "ambientocclusionmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "ambientocclusionmapanisotropy",
          "language": "python"
        },
        {
          "code": "ambientocclusionmapcoord",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "ambientocclusionmapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "ambientocclusionmapchannelsource",
          "language": "python"
        },
        {
          "code": "normalmapextendu",
          "language": "python"
        },
        {
          "code": "normalmapextendv",
          "language": "python"
        },
        {
          "code": "normalmapextendw",
          "language": "python"
        },
        {
          "code": "normalmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "normalmapanisotropy",
          "language": "python"
        },
        {
          "code": "normalmapcoord",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "normalmapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "heightmapenable",
          "language": "python"
        },
        {
          "code": "heightmapextendu",
          "language": "python"
        },
        {
          "code": "heightmapextendv",
          "language": "python"
        },
        {
          "code": "heightmapextendw",
          "language": "python"
        },
        {
          "code": "heightmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "heightmapanisotropy",
          "language": "python"
        },
        {
          "code": "heightmapcoord",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "heightmapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "heightmapchannelsource",
          "language": "python"
        },
        {
          "code": "parallaxscale",
          "language": "python"
        },
        {
          "code": "parallaxocclusion",
          "language": "python"
        },
        {
          "code": "displaceverts",
          "language": "python"
        },
        {
          "code": "displacescale",
          "language": "python"
        },
        {
          "code": "displacemid",
          "language": "python"
        },
        {
          "code": "emitmapextendu",
          "language": "python"
        },
        {
          "code": "emitmapextendv",
          "language": "python"
        },
        {
          "code": "emitmapextendw",
          "language": "python"
        },
        {
          "code": "emitmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "emitmapanisotropy",
          "language": "python"
        },
        {
          "code": "emitmapcoord",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "emitmapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "alphamapextendu",
          "language": "python"
        },
        {
          "code": "alphamapextendv",
          "language": "python"
        },
        {
          "code": "alphamapextendw",
          "language": "python"
        },
        {
          "code": "alphamapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "alphamapanisotropy",
          "language": "python"
        },
        {
          "code": "alphamapcoord",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "alphamapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "postmultalpha",
          "language": "python"
        },
        {
          "code": "rimlight0enable",
          "language": "python"
        },
        {
          "code": "rimlight0map",
          "language": "python"
        },
        {
          "code": "rimlight0mapextendu",
          "language": "python"
        },
        {
          "code": "rimlight0mapextendv",
          "language": "python"
        },
        {
          "code": "rimlight0mapextendw",
          "language": "python"
        },
        {
          "code": "rimlight0mapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "rimlight0mapanisotropy",
          "language": "python"
        },
        {
          "code": "rimlight0mapcoord",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "rimlight0mapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "rimlight0color",
          "language": "python"
        },
        {
          "code": "rimlight0colorr",
          "language": "python"
        },
        {
          "code": "rimlight0colorg",
          "language": "python"
        },
        {
          "code": "rimlight0colorb",
          "language": "python"
        },
        {
          "code": "rimlight0center",
          "language": "python"
        },
        {
          "code": "rimlight0width",
          "language": "python"
        },
        {
          "code": "rimlight0strength",
          "language": "python"
        },
        {
          "code": "rimlight0strengthramp",
          "language": "python"
        },
        {
          "code": "shadowstrength",
          "language": "python"
        },
        {
          "code": "shadowcolor",
          "language": "python"
        },
        {
          "code": "shadowcolorr",
          "language": "python"
        },
        {
          "code": "shadowcolorg",
          "language": "python"
        },
        {
          "code": "shadowcolorb",
          "language": "python"
        },
        {
          "code": "darknessemit",
          "language": "python"
        },
        {
          "code": "darknessemitcolor",
          "language": "python"
        },
        {
          "code": "darknessemitcolorr",
          "language": "python"
        },
        {
          "code": "darknessemitcolorg",
          "language": "python"
        },
        {
          "code": "darknessemitcolorb",
          "language": "python"
        },
        {
          "code": "darknessemitmap",
          "language": "python"
        },
        {
          "code": "darknessemitmapextendu",
          "language": "python"
        },
        {
          "code": "darknessemitmapextendv",
          "language": "python"
        },
        {
          "code": "darknessemitmapextendw",
          "language": "python"
        },
        {
          "code": "darknessemitmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "darknessemitmapanisotropy",
          "language": "python"
        },
        {
          "code": "darknessemitmapcoord",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "darknessemitmapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "writecameradepthtoalpha",
          "language": "python"
        },
        {
          "code": "applypointcolor",
          "language": "python"
        },
        {
          "code": "instancetexture",
          "language": "python"
        },
        {
          "code": "basecolormap",
          "language": "python"
        },
        {
          "code": "darknessemitmap",
          "language": "python"
        },
        {
          "code": "rimlight0map",
          "language": "python"
        },
        {
          "code": "color0output",
          "language": "python"
        },
        {
          "code": "worldspaceposition",
          "language": "python"
        },
        {
          "code": "worldspacenormal",
          "language": "python"
        },
        {
          "code": "cameraspaceposition",
          "language": "python"
        },
        {
          "code": "cameraspacenormal",
          "language": "python"
        },
        {
          "code": "texturecoord0",
          "language": "python"
        },
        {
          "code": "specularlevelmap",
          "language": "python"
        },
        {
          "code": "metallicmap",
          "language": "python"
        },
        {
          "code": "roughnessmap",
          "language": "python"
        },
        {
          "code": "ambientocclusionmap",
          "language": "python"
        },
        {
          "code": "finaldiffcolor",
          "language": "python"
        },
        {
          "code": "finalspeccolor",
          "language": "python"
        },
        {
          "code": "shadowstrength",
          "language": "python"
        },
        {
          "code": "normalizedshadowstrength",
          "language": "python"
        },
        {
          "code": "skelrootpath",
          "language": "python"
        },
        {
          "code": "Final Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "separatealphafunc",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "blendconstant",
          "language": "python"
        },
        {
          "code": "blendconstantr",
          "language": "python"
        },
        {
          "code": "blendconstantg",
          "language": "python"
        },
        {
          "code": "blendconstantb",
          "language": "python"
        },
        {
          "code": "blendconstanta",
          "language": "python"
        },
        {
          "code": "legacyalphabehavior",
          "language": "python"
        },
        {
          "code": "postmultalpha",
          "language": "python"
        },
        {
          "code": "pointcolorpremult",
          "language": "python"
        },
        {
          "code": "alreadypremult",
          "language": "python"
        },
        {
          "code": "premultinshader",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "depthwriting",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "alphathreshold",
          "language": "python"
        },
        {
          "code": "polygonoffset",
          "language": "python"
        },
        {
          "code": "polygonoffsetfactor",
          "language": "python"
        },
        {
          "code": "polygonoffsetunits",
          "language": "python"
        },
        {
          "code": "/project1/moviein1",
          "language": "python"
        },
        {
          "code": "/geo1/circle1",
          "language": "python"
        }
      ],
      "shortcuts": [],
      "performanceNotes": [
        "The cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.",
        "The OpenGL (pre-2022) or Vulkan (2022-) code that runs on the GPU and creates rendered images from polygons and textures. A shader is programmed in Text DATs and referenced by a GLSL Material or a GLSL TOP. Shaders are composed of up to three parts: Vertex Shader, Pixel Shader and Compute Shader.",
        "An Operator Family that creates, composites and modifies images, and reads/writes images and movies to/from files and the network. TOPs run on the graphics card's GPU.",
        "A Operator Family that reads, creates and modifies 3D points, polygons, lines, particles, surfaces, spheres and meatballs. Particles and point clouds are now done primarily on the GPU using TOPs."
      ],
      "subcategory": "Shaders",
      "useCases": [
        "3D scene visualization",
        "Real-time graphics rendering",
        "Multi-pass rendering workflows",
        "Shadow and reflection generation"
      ],
      "url": "https://docs.derivative.ca/PBR_MAT",
      "scraped": true,
      "scrapedAt": "2025-08-01T23:56:21.317Z",
      "parameterCount": 50
    },
    {
      "name": "Experimental:PBR",
      "fullName": "Experimental:PBR MAT",
      "category": "MAT",
      "description": "The PBR MAT creates a material using a Physically Based Rendering (PBR) lighting model. It has support for textures, reflections, bumps, cone lights, rim lights, alpha maps and more.\n\nIt also supports most Adobe Substance 3D Designer PBR materials loaded in the Substance TOP.\n\nYou can output its GLSL shader into two DATs for further adaptation in a GLSL MAT by using the Output Shader parameter.\n\nThis OP creates physically based materials from texture maps you assign to it and works with any content pipeline whether you use Maya, Houdini, Unreal, Photoshop etc.\n\nYou can get more PBR materials from PBR texture libraries such as Quixel and Poliigon and Game Textures.\nSee also: Substance TOP.\n\npbrMAT_Class\n\nNote: Simply applying alpha to an object does not make it transparent. For more information refer to the Transparency article.\n\nOther rim lights have the same parameters, internal parameter names just have a different number instead of 1.\n\nRefer to the  Deform Article for more information on doing deforms in TouchDesigner.\n\nBlending is summing the color value of the pixel being drawn and the pixel currently present in the Color-Buffer. Blending is typically used to simulate Transparency.\n\t\tThe blending equation is:\n\t\tFinal Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)\n\nDepth-Testing is comparing the depth value of the pixel being drawn with the pixel currently in the Frame-Buffer. A pixel that is determined to be in-front of the pixel currently in the Frame-Buffer will be drawn over it. Pixels that are determined to be behind the pixel currently in the Frame-Buffer will not be drawn. Depth-Testing allows geometry in a 3D scene to occlude geometry behind it, and be occluded by geometry in-front of it regardless of the order the geometry was drawn.\n\nFor a more detailed description of Depth-Testing, refer to the Depth-Test article.\n\nAlpha-testing allows you to choose to draw or not draw a pixel based on its alpha value.\n\nThe wire-frame feature will render the geometry as wire-frame, using the actual primitive type used in the render. What this means is surfaces like Metaballs, NURBs and Beziers will become a wire-frame of the triangles/triangle-strips used to render them (since these types of primitives can't be natively rendered in OpenGL).\n\nThe cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.\n\nThis feature pushes the polygons back into space a tiny fraction. This is useful when you are rendering two polygons directly on-top of each other and are experiencing Z-Fighting. Refer to Polygon Depth Offset for more information. This is also an important feature when doing shadows.\n\nExtra Information for the PBR MAT can be accessed via an Info CHOP.\n\nTouchDesigner Build: Latest\\nwikieditorwikieditor",
      "parameters": [
        {
          "name": "basecolor",
          "label": "Basecolor",
          "description": "Basecolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "specularlevel",
          "label": "Specularlevel",
          "description": "Specularlevel parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "metallic",
          "label": "Metallic",
          "description": "Metallic parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "roughness",
          "label": "Roughness",
          "description": "Roughness parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "ambientocclusion",
          "label": "Ambientocclusion",
          "description": "Ambientocclusion parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "envlightquality",
          "label": "Envlightquality",
          "description": "Envlightquality parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "emit",
          "label": "Emit",
          "description": "Emit parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "constant",
          "label": "Constant",
          "description": "Constant parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "frontfacelit",
          "label": "Frontfacelit",
          "description": "Frontfacelit parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "backfacelit",
          "label": "Backfacelit",
          "description": "Backfacelit parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "outputshader",
          "label": "Outputshader",
          "description": "Outputshader parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "substance",
          "label": "Substance",
          "description": "Substance parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "basecolormap",
          "label": "Basecolormap",
          "description": "Basecolormap parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "specularlevelmap",
          "label": "Specularlevelmap",
          "description": "Specularlevelmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "metallicmap",
          "label": "Metallicmap",
          "description": "Metallicmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "roughnessmap",
          "label": "Roughnessmap",
          "description": "Roughnessmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "ambientocclusionmap",
          "label": "Ambientocclusionmap",
          "description": "Ambientocclusionmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "normalmap",
          "label": "Normalmap",
          "description": "Normalmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "bumpscale",
          "label": "Bumpscale",
          "description": "Bumpscale parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "heightmapenable",
          "label": "Heightmapenable",
          "description": "Heightmapenable parameter",
          "type": "Toggle",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "heightmap",
          "label": "Heightmap",
          "description": "Heightmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "parallaxscale",
          "label": "Parallaxscale",
          "description": "Parallaxscale parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "parallaxocclusion",
          "label": "Parallaxocclusion",
          "description": "Parallaxocclusion parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "displaceverts",
          "label": "Displaceverts",
          "description": "Displaceverts parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "displacescale",
          "label": "Displacescale",
          "description": "Displacescale parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "displacemid",
          "label": "Displacemid",
          "description": "Displacemid parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "emitmap",
          "label": "Emitmap",
          "description": "Emitmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Maps Page"
        },
        {
          "name": "alphamap",
          "label": "Alphamap",
          "description": "Alphamap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Alpha Page"
        },
        {
          "name": "alphamode",
          "label": "Alphamode",
          "description": "Alphamode parameter",
          "type": "Menu",
          "default": "",
          "range": null,
          "options": null,
          "section": "Alpha Page"
        },
        {
          "name": "alphafront",
          "label": "Alphafront",
          "description": "Alphafront parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Alpha Page"
        },
        {
          "name": "alphaside",
          "label": "Alphaside",
          "description": "Alphaside parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Alpha Page"
        },
        {
          "name": "rolloff",
          "label": "Rolloff",
          "description": "Rolloff parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Alpha Page"
        },
        {
          "name": "postmultalpha",
          "label": "Postmultalpha",
          "description": "Postmultalpha parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Alpha Page"
        },
        {
          "name": "rimlight",
          "label": "Rimlight",
          "description": "Rimlight parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Rim Page"
        },
        {
          "name": "shadowstrength",
          "label": "Shadowstrength",
          "description": "Shadowstrength parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "shadowcolor",
          "label": "Shadowcolor",
          "description": "Shadowcolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "darknessemit",
          "label": "Darknessemit",
          "description": "Darknessemit parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "darknessemitcolor",
          "label": "Darknessemitcolor",
          "description": "Darknessemitcolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "darknessemitmap",
          "label": "Darknessemitmap",
          "description": "Darknessemitmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "writecameradepthtoalpha",
          "label": "Writecameradepthtoalpha",
          "description": "Writecameradepthtoalpha parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "applypointcolor",
          "label": "Applypointcolor",
          "description": "Applypointcolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "instancetexture",
          "label": "Instancetexture",
          "description": "Instancetexture parameter",
          "type": "Str",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "color",
          "label": "Color",
          "description": "Color parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "dodeform",
          "label": "Dodeform",
          "description": "Dodeform parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "deformdata",
          "label": "Deformdata",
          "description": "Deformdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "targetsop",
          "label": "Targetsop",
          "description": "Targetsop parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptpath",
          "label": "Pcaptpath",
          "description": "Pcaptpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptdata",
          "label": "Pcaptdata",
          "description": "Pcaptdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "skelrootpath",
          "label": "Skelrootpath",
          "description": "Skelrootpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "mat",
          "label": "Mat",
          "description": "Mat parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        }
      ],
      "inputs": [],
      "outputs": [
        {
          "type": "MAT",
          "description": "MAT output",
          "index": 0
        }
      ],
      "examples": [],
      "tips": [
        "Note: Simply applying alpha to an object does not make it transparent. For more information refer to the Transparency article."
      ],
      "related": [],
      "codeSnippets": [
        {
          "code": "specularlevel",
          "language": "python"
        },
        {
          "code": "ambientocclusion",
          "language": "python"
        },
        {
          "code": "envlightquality",
          "language": "python"
        },
        {
          "code": "frontfacelit",
          "language": "python"
        },
        {
          "code": "backfacelit",
          "language": "python"
        },
        {
          "code": "backfacelit",
          "language": "python"
        },
        {
          "code": "outputshader",
          "language": "python"
        },
        {
          "code": "basecolormap",
          "language": "python"
        },
        {
          "code": "basecolormapextendu",
          "language": "python"
        },
        {
          "code": "basecolormapextendv",
          "language": "python"
        },
        {
          "code": "basecolormapextendw",
          "language": "python"
        },
        {
          "code": "basecolormapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "basecolormapanisotropy",
          "language": "python"
        },
        {
          "code": "texturesamplingmode",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "basecolormapcoord",
          "language": "python"
        },
        {
          "code": "basecolormapcoordattrib",
          "language": "python"
        },
        {
          "code": "basecolormapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "specularlevelmap",
          "language": "python"
        },
        {
          "code": "specularlevelmapextendu",
          "language": "python"
        },
        {
          "code": "specularlevelmapextendv",
          "language": "python"
        },
        {
          "code": "specularlevelmapextendw",
          "language": "python"
        },
        {
          "code": "specularlevelmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "specularlevelmapanisotropy",
          "language": "python"
        },
        {
          "code": "specularlevelmapsamplingmode",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "specularlevelmapcoord",
          "language": "python"
        },
        {
          "code": "specularlevelmapcoordattrib",
          "language": "python"
        },
        {
          "code": "specularlevelmapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "specularlevelmapchannelsource",
          "language": "python"
        },
        {
          "code": "metallicmap",
          "language": "python"
        },
        {
          "code": "metalnessmapextendu",
          "language": "python"
        },
        {
          "code": "metalnessmapextendv",
          "language": "python"
        },
        {
          "code": "metalnessmapextendw",
          "language": "python"
        },
        {
          "code": "metalnessmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "metalnessmapanisotropy",
          "language": "python"
        },
        {
          "code": "metalnessmapsamplingmode",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "metallicmapcoord",
          "language": "python"
        },
        {
          "code": "metalnessmapcoordattrib",
          "language": "python"
        },
        {
          "code": "metallicmapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "metallicmapchannelsource",
          "language": "python"
        },
        {
          "code": "roughnessmap",
          "language": "python"
        },
        {
          "code": "roughnessmapextendu",
          "language": "python"
        },
        {
          "code": "roughnessmapextendv",
          "language": "python"
        },
        {
          "code": "roughnessmapextendw",
          "language": "python"
        },
        {
          "code": "roughnessmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "roughnessmapanisotropy",
          "language": "python"
        },
        {
          "code": "roughnessmapsamplingmode",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "roughnessmapcoord",
          "language": "python"
        },
        {
          "code": "roughnessmapcoordattrib",
          "language": "python"
        },
        {
          "code": "roughnessmapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "roughnessmapchannelsource",
          "language": "python"
        },
        {
          "code": "ambientocclusionmap",
          "language": "python"
        },
        {
          "code": "ambientocclusionmapextendu",
          "language": "python"
        },
        {
          "code": "ambientocclusionmapextendv",
          "language": "python"
        },
        {
          "code": "ambientocclusionmapextendw",
          "language": "python"
        },
        {
          "code": "ambientocclusionmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "ambientocclusionmapanisotropy",
          "language": "python"
        },
        {
          "code": "ambientocclusionmapsamplingmode",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "ambientocclusionmapcoord",
          "language": "python"
        },
        {
          "code": "ambientocclusionmapcoordattrib",
          "language": "python"
        },
        {
          "code": "ambientocclusionmapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "ambientocclusionmapchannelsource",
          "language": "python"
        },
        {
          "code": "normalmapextendu",
          "language": "python"
        },
        {
          "code": "normalmapextendv",
          "language": "python"
        },
        {
          "code": "normalmapextendw",
          "language": "python"
        },
        {
          "code": "normalmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "normalmapanisotropy",
          "language": "python"
        },
        {
          "code": "normalmapsamplingmode",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "normalmapcoord",
          "language": "python"
        },
        {
          "code": "normalmapcoordattrib",
          "language": "python"
        },
        {
          "code": "normalmapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "heightmapenable",
          "language": "python"
        },
        {
          "code": "heightmapextendu",
          "language": "python"
        },
        {
          "code": "heightmapextendv",
          "language": "python"
        },
        {
          "code": "heightmapextendw",
          "language": "python"
        },
        {
          "code": "heightmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "heightmapanisotropy",
          "language": "python"
        },
        {
          "code": "heightmapsamplingmode",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "heightmapcoord",
          "language": "python"
        },
        {
          "code": "heightmapcoordattrib",
          "language": "python"
        },
        {
          "code": "heightmapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "heightmapchannelsource",
          "language": "python"
        },
        {
          "code": "parallaxscale",
          "language": "python"
        },
        {
          "code": "parallaxocclusion",
          "language": "python"
        },
        {
          "code": "displaceverts",
          "language": "python"
        },
        {
          "code": "displacescale",
          "language": "python"
        },
        {
          "code": "displacemid",
          "language": "python"
        },
        {
          "code": "emitmapextendu",
          "language": "python"
        },
        {
          "code": "emitmapextendv",
          "language": "python"
        },
        {
          "code": "emitmapextendw",
          "language": "python"
        },
        {
          "code": "emitmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "emitmapanisotropy",
          "language": "python"
        },
        {
          "code": "emitmapsamplingmode",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "emitmapcoord",
          "language": "python"
        },
        {
          "code": "emitmapcoordattrib",
          "language": "python"
        },
        {
          "code": "emitmapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "alphamapextendu",
          "language": "python"
        },
        {
          "code": "alphamapextendv",
          "language": "python"
        },
        {
          "code": "alphamapextendw",
          "language": "python"
        },
        {
          "code": "alphamapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "alphamapanisotropy",
          "language": "python"
        },
        {
          "code": "alphamapsamplingmode",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "alphamapcoord",
          "language": "python"
        },
        {
          "code": "alphamapcoordattrib",
          "language": "python"
        },
        {
          "code": "alphamapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "postmultalpha",
          "language": "python"
        },
        {
          "code": "rimlight0enable",
          "language": "python"
        },
        {
          "code": "rimlight0map",
          "language": "python"
        },
        {
          "code": "rimlight0mapextendu",
          "language": "python"
        },
        {
          "code": "rimlight0mapextendv",
          "language": "python"
        },
        {
          "code": "rimlight0mapextendw",
          "language": "python"
        },
        {
          "code": "rimlight0mapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "rimlight0mapanisotropy",
          "language": "python"
        },
        {
          "code": "rimlight0mapsamplingmode",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "rimlight0mapcoord",
          "language": "python"
        },
        {
          "code": "rimlight0mapcoordattr",
          "language": "python"
        },
        {
          "code": "rimlight0mapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "rimlight0color",
          "language": "python"
        },
        {
          "code": "rimlight0colorr",
          "language": "python"
        },
        {
          "code": "rimlight0colorg",
          "language": "python"
        },
        {
          "code": "rimlight0colorb",
          "language": "python"
        },
        {
          "code": "rimlight0center",
          "language": "python"
        },
        {
          "code": "rimlight0width",
          "language": "python"
        },
        {
          "code": "rimlight0strength",
          "language": "python"
        },
        {
          "code": "rimlight0strengthramp",
          "language": "python"
        },
        {
          "code": "shadowstrength",
          "language": "python"
        },
        {
          "code": "shadowcolor",
          "language": "python"
        },
        {
          "code": "shadowcolorr",
          "language": "python"
        },
        {
          "code": "shadowcolorg",
          "language": "python"
        },
        {
          "code": "shadowcolorb",
          "language": "python"
        },
        {
          "code": "darknessemit",
          "language": "python"
        },
        {
          "code": "darknessemitcolor",
          "language": "python"
        },
        {
          "code": "darknessemitcolorr",
          "language": "python"
        },
        {
          "code": "darknessemitcolorg",
          "language": "python"
        },
        {
          "code": "darknessemitcolorb",
          "language": "python"
        },
        {
          "code": "darknessemitmap",
          "language": "python"
        },
        {
          "code": "darknessemitmapextendu",
          "language": "python"
        },
        {
          "code": "darknessemitmapextendv",
          "language": "python"
        },
        {
          "code": "darknessemitmapextendw",
          "language": "python"
        },
        {
          "code": "darknessemitmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "darknessemitmapanisotropy",
          "language": "python"
        },
        {
          "code": "darknessemitmapsamplingmode",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "darknessemitmapcoord",
          "language": "python"
        },
        {
          "code": "darknessemitmapcoordattrib",
          "language": "python"
        },
        {
          "code": "darknessemitmapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "writecameradepthtoalpha",
          "language": "python"
        },
        {
          "code": "applypointcolor",
          "language": "python"
        },
        {
          "code": "instancetexture",
          "language": "python"
        },
        {
          "code": "basecolormap",
          "language": "python"
        },
        {
          "code": "darknessemitmap",
          "language": "python"
        },
        {
          "code": "rimlight0map",
          "language": "python"
        },
        {
          "code": "color0output",
          "language": "python"
        },
        {
          "code": "worldspaceposition",
          "language": "python"
        },
        {
          "code": "worldspacenormal",
          "language": "python"
        },
        {
          "code": "cameraspaceposition",
          "language": "python"
        },
        {
          "code": "cameraspacenormal",
          "language": "python"
        },
        {
          "code": "texturecoord0",
          "language": "python"
        },
        {
          "code": "specularlevelmap",
          "language": "python"
        },
        {
          "code": "metallicmap",
          "language": "python"
        },
        {
          "code": "roughnessmap",
          "language": "python"
        },
        {
          "code": "ambientocclusionmap",
          "language": "python"
        },
        {
          "code": "finaldiffcolor",
          "language": "python"
        },
        {
          "code": "finalspeccolor",
          "language": "python"
        },
        {
          "code": "shadowstrength",
          "language": "python"
        },
        {
          "code": "normalizedshadowstrength",
          "language": "python"
        },
        {
          "code": "skelrootpath",
          "language": "python"
        },
        {
          "code": "Final Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "separatealphafunc",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "blendconstant",
          "language": "python"
        },
        {
          "code": "blendconstantr",
          "language": "python"
        },
        {
          "code": "blendconstantg",
          "language": "python"
        },
        {
          "code": "blendconstantb",
          "language": "python"
        },
        {
          "code": "blendconstanta",
          "language": "python"
        },
        {
          "code": "legacyalphabehavior",
          "language": "python"
        },
        {
          "code": "postmultalpha",
          "language": "python"
        },
        {
          "code": "pointcolorpremult",
          "language": "python"
        },
        {
          "code": "alreadypremult",
          "language": "python"
        },
        {
          "code": "premultinshader",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "depthwriting",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "alphathreshold",
          "language": "python"
        },
        {
          "code": "polygonoffset",
          "language": "python"
        },
        {
          "code": "polygonoffsetfactor",
          "language": "python"
        },
        {
          "code": "polygonoffsetunits",
          "language": "python"
        },
        {
          "code": "/project1/moviein1",
          "language": "python"
        },
        {
          "code": "/geo1/circle1",
          "language": "python"
        }
      ],
      "shortcuts": [],
      "performanceNotes": [
        "The cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.",
        "The OpenGL (pre-2022) or Vulkan (2022-) code that runs on the GPU and creates rendered images from polygons and textures. A shader is programmed in Text DATs and referenced by a GLSL Material or a GLSL TOP. Shaders are composed of up to three parts: Vertex Shader, Pixel Shader and Compute Shader.",
        "An Operator Family that creates, composites and modifies images, and reads/writes images and movies to/from files and the network. TOPs run on the graphics card's GPU.",
        "A Operator Family that reads, creates and modifies 3D points, polygons, lines, particles, surfaces, spheres and meatballs. Particles and point clouds are now done primarily on the GPU using TOPs."
      ],
      "subcategory": "Shaders",
      "useCases": [
        "3D scene visualization",
        "Real-time graphics rendering",
        "Multi-pass rendering workflows",
        "Shadow and reflection generation"
      ],
      "url": "https://docs.derivative.ca/Experimental:PBR_MAT",
      "scraped": true,
      "scrapedAt": "2025-08-01T23:56:21.378Z",
      "parameterCount": 50
    },
    {
      "name": "Phong",
      "fullName": "Phong MAT",
      "category": "MAT",
      "description": "The Phong MAT creates a material using the Phong Shading model. It has support for textures, reflections, bumps, cone lights, rim lights, alpha maps and more. You can output its GLSL shader into two DATs for further adaptation in a GLSL MAT by using the Output Shader parameter.\n\nPhong Shading models three types of reflected light:\n\nPhong Shading produces very nice specular highlights, although it is still an approximation and not physically accurate.  Contrasting with the Gouraud shading model that calculates the lighting at each vertex and interpolates the value across the polygon, Phong calculates the lighting at each pixel.\n\nTo see how all of the different parts are summed together by looking at the Phong Lighting Equation article.\n\nphongMAT_Class\n\nNote: Simply applying alpha to an object does not make it transparent. For more information refer to the Transparency article.\n\nOn the Multi-texturing page of the Phong material, you can have up to 4 texture maps and choose any of the 8 possible texture coordinates for each map. By default the texture maps are multiplied together, but there is a field for a custom GLSL code that can be used. Here's how that works:\n\nThe 4 texture maps are referred to in the parameter by t0, t1, t2 and t3 respectively. So the default equation if all 4 texture maps are used is: t0 * t1 * t2 * t3. You can use and constants and other math operators, so for example t0 + (t1 * 0.5) is valid. If they refer to a map that doesn't exist, the shader won't compile correctly (e.g. using t3 when it isn't set or the TOP doesn't exist).\n\nThey can also refer to specific components of the texture using .r .g .b and .a. So for example if you want to do t0 over t1, the expression would be:\n\nThe output from your expression must be a vec4, so for example:\n\nThe alpha from the result of these maps is used.\n\nOther rim lights have the same parameters, internal parameter names just have a different number instead of 1.\n\nRefer to the  Deform Article for more information on doing deforms in TouchDesigner.\n\nBlending is summing the color value of the pixel being drawn and the pixel currently present in the Color-Buffer. Blending is typically used to simulate Transparency.\n\t\tThe blending equation is:\n\t\tFinal Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)\n\nDepth-Testing is comparing the depth value of the pixel being drawn with the pixel currently in the Frame-Buffer. A pixel that is determined to be in-front of the pixel currently in the Frame-Buffer will be drawn over it. Pixels that are determined to be behind the pixel currently in the Frame-Buffer will not be drawn. Depth-Testing allows geometry in a 3D scene to occlude geometry behind it, and be occluded by geometry in-front of it regardless of the order the geometry was drawn.\n\nFor a more detailed description of Depth-Testing, refer to the Depth-Test article.\n\nAlpha-testing allows you to choose to draw or not draw a pixel based on its alpha value.\n\nThe wire-frame feature will render the geometry as wire-frame, using the actual primitive type used in the render. What this means is surfaces like Metaballs, NURBs and Beziers will become a wire-frame of the triangles/triangle-strips used to render them (since these types of primitives can't be natively rendered in OpenGL).\n\nThe cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.\n\nThis feature pushes the polygons back into space a tiny fraction. This is useful when you are rendering two polygons directly on-top of each other and are experiencing Z-Fighting. Refer to Polygon Depth Offset for more information. This is also an important feature when doing shadows.\n\nExtra Information for the Phong MAT can be accessed via an Info CHOP.\n\nTouchDesigner Build: Latest\\nwikieditorwikieditorwikieditor2021.100002020.200002018.28070before 2018.28070",
      "parameters": [
        {
          "name": "ambdiff",
          "label": "Ambdiff",
          "description": "Ambdiff parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "diff",
          "label": "Diff",
          "description": "Diff parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "amb",
          "label": "Amb",
          "description": "Amb parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "spec",
          "label": "Spec",
          "description": "Spec parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "emit",
          "label": "Emit",
          "description": "Emit parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "constant",
          "label": "Constant",
          "description": "Constant parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "shininess",
          "label": "Shininess",
          "description": "Shininess parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "colormap",
          "label": "Colormap",
          "description": "Colormap parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "normalmap",
          "label": "Normalmap",
          "description": "Normalmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "bumpscale",
          "label": "Bumpscale",
          "description": "Bumpscale parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "heightmapenable",
          "label": "Heightmapenable",
          "description": "Heightmapenable parameter",
          "type": "Toggle",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "heightmap",
          "label": "Heightmap",
          "description": "Heightmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "parallaxscale",
          "label": "Parallaxscale",
          "description": "Parallaxscale parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "parallaxocclusion",
          "label": "Parallaxocclusion",
          "description": "Parallaxocclusion parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "displaceverts",
          "label": "Displaceverts",
          "description": "Displaceverts parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "displacescale",
          "label": "Displacescale",
          "description": "Displacescale parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "displacemid",
          "label": "Displacemid",
          "description": "Displacemid parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "diffusemap",
          "label": "Diffusemap",
          "description": "Diffusemap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "specmap",
          "label": "Specmap",
          "description": "Specmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "emitmap",
          "label": "Emitmap",
          "description": "Emitmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "envmap",
          "label": "Envmap",
          "description": "Envmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "envmapcolor",
          "label": "Envmapcolor",
          "description": "Envmapcolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "envmaprotate",
          "label": "Envmaprotate",
          "description": "Envmaprotate parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "envmaptype2d",
          "label": "Envmaptype2d",
          "description": "Envmaptype2d parameter",
          "type": "Menu",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "frontfacelit",
          "label": "Frontfacelit",
          "description": "Frontfacelit parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "backfacelit",
          "label": "Backfacelit",
          "description": "Backfacelit parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "outputshader",
          "label": "Outputshader",
          "description": "Outputshader parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "alphamap",
          "label": "Alphamap",
          "description": "Alphamap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Alpha Page"
        },
        {
          "name": "alphamode",
          "label": "Alphamode",
          "description": "Alphamode parameter",
          "type": "Menu",
          "default": "",
          "range": null,
          "options": null,
          "section": "Alpha Page"
        },
        {
          "name": "alphafront",
          "label": "Alphafront",
          "description": "Alphafront parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Alpha Page"
        },
        {
          "name": "alphaside",
          "label": "Alphaside",
          "description": "Alphaside parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Alpha Page"
        },
        {
          "name": "rolloff",
          "label": "Rolloff",
          "description": "Rolloff parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Alpha Page"
        },
        {
          "name": "postmultalpha",
          "label": "Postmultalpha",
          "description": "Postmultalpha parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Alpha Page"
        },
        {
          "name": "alphamultlight",
          "label": "Alphamultlight",
          "description": "Alphamultlight parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Alpha Page"
        },
        {
          "name": "multitexturing",
          "label": "Multitexturing",
          "description": "Multitexturing parameter",
          "type": "Str",
          "default": "",
          "range": null,
          "options": null,
          "section": "Multi-Texturing Page"
        },
        {
          "name": "texture1",
          "label": "Texture1",
          "description": "Texture1 parameter",
          "type": "Str",
          "default": "",
          "range": null,
          "options": null,
          "section": "Multi-Texturing Page"
        },
        {
          "name": "texture2",
          "label": "Texture2",
          "description": "Texture2 parameter",
          "type": "Str",
          "default": "",
          "range": null,
          "options": null,
          "section": "Multi-Texturing Page"
        },
        {
          "name": "texture3",
          "label": "Texture3",
          "description": "Texture3 parameter",
          "type": "Str",
          "default": "",
          "range": null,
          "options": null,
          "section": "Multi-Texturing Page"
        },
        {
          "name": "texture4",
          "label": "Texture4",
          "description": "Texture4 parameter",
          "type": "Str",
          "default": "",
          "range": null,
          "options": null,
          "section": "Multi-Texturing Page"
        },
        {
          "name": "multitexexpr",
          "label": "Multitexexpr",
          "description": "Multitexexpr parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Multi-Texturing Page"
        },
        {
          "name": "rimlight",
          "label": "Rimlight",
          "description": "Rimlight parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Rim Page"
        },
        {
          "name": "shadowstrength",
          "label": "Shadowstrength",
          "description": "Shadowstrength parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "shadowcolor",
          "label": "Shadowcolor",
          "description": "Shadowcolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "darknessemit",
          "label": "Darknessemit",
          "description": "Darknessemit parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "darknessemitcolor",
          "label": "Darknessemitcolor",
          "description": "Darknessemitcolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "darknessemitmap",
          "label": "Darknessemitmap",
          "description": "Darknessemitmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "spec2",
          "label": "Spec2",
          "description": "Spec2 parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "shininess2",
          "label": "Shininess2",
          "description": "Shininess2 parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "writecameradepthtoalpha",
          "label": "Writecameradepthtoalpha",
          "description": "Writecameradepthtoalpha parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "applypointcolor",
          "label": "Applypointcolor",
          "description": "Applypointcolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "instancetexture",
          "label": "Instancetexture",
          "description": "Instancetexture parameter",
          "type": "Str",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "color",
          "label": "Color",
          "description": "Color parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "dodeform",
          "label": "Dodeform",
          "description": "Dodeform parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "deformdata",
          "label": "Deformdata",
          "description": "Deformdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "targetsop",
          "label": "Targetsop",
          "description": "Targetsop parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptpath",
          "label": "Pcaptpath",
          "description": "Pcaptpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptdata",
          "label": "Pcaptdata",
          "description": "Pcaptdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "skelrootpath",
          "label": "Skelrootpath",
          "description": "Skelrootpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "mat",
          "label": "Mat",
          "description": "Mat parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        }
      ],
      "inputs": [],
      "outputs": [
        {
          "type": "MAT",
          "description": "MAT output",
          "index": 0
        }
      ],
      "examples": [],
      "tips": [
        "NOTE: We see the color of an object because of the color of light that the material reflects.",
        "Note: Simply applying alpha to an object does not make it transparent. For more information refer to the Transparency article."
      ],
      "related": [],
      "codeSnippets": [
        {
          "code": "colormapextendu",
          "language": "python"
        },
        {
          "code": "colormapextendv",
          "language": "python"
        },
        {
          "code": "colormapextendw",
          "language": "python"
        },
        {
          "code": "colormapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "colormapanisotropy",
          "language": "python"
        },
        {
          "code": "colormapcoord",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "colormapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "normalmapextendu",
          "language": "python"
        },
        {
          "code": "normalmapextendv",
          "language": "python"
        },
        {
          "code": "normalmapextendw",
          "language": "python"
        },
        {
          "code": "normalmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "normalmapanisotropy",
          "language": "python"
        },
        {
          "code": "normalmapcoord",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "normalmapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "heightmapenable",
          "language": "python"
        },
        {
          "code": "heightmapextendu",
          "language": "python"
        },
        {
          "code": "heightmapextendv",
          "language": "python"
        },
        {
          "code": "heightmapextendw",
          "language": "python"
        },
        {
          "code": "heightmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "heightmapanisotropy",
          "language": "python"
        },
        {
          "code": "heightmapcoord",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "heightmapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "heightmapchannelsource",
          "language": "python"
        },
        {
          "code": "parallaxscale",
          "language": "python"
        },
        {
          "code": "parallaxocclusion",
          "language": "python"
        },
        {
          "code": "displaceverts",
          "language": "python"
        },
        {
          "code": "displacescale",
          "language": "python"
        },
        {
          "code": "displacemid",
          "language": "python"
        },
        {
          "code": "diffusemapextendu",
          "language": "python"
        },
        {
          "code": "diffusemapextendv",
          "language": "python"
        },
        {
          "code": "diffusemapextendw",
          "language": "python"
        },
        {
          "code": "diffusemapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "diffusemapanisotropy",
          "language": "python"
        },
        {
          "code": "diffusemapcoord",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "diffusemapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "specmapextendu",
          "language": "python"
        },
        {
          "code": "specmapextendv",
          "language": "python"
        },
        {
          "code": "specmapextendw",
          "language": "python"
        },
        {
          "code": "specmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "specmapanisotropy",
          "language": "python"
        },
        {
          "code": "specmapcoord",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "specmapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "emitmapextendu",
          "language": "python"
        },
        {
          "code": "emitmapextendv",
          "language": "python"
        },
        {
          "code": "emitmapextendw",
          "language": "python"
        },
        {
          "code": "emitmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "emitmapanisotropy",
          "language": "python"
        },
        {
          "code": "emitmapcoord",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "emitmapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "envmapextendu",
          "language": "python"
        },
        {
          "code": "envmapextendv",
          "language": "python"
        },
        {
          "code": "envmapextendw",
          "language": "python"
        },
        {
          "code": "envmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "envmapanisotropy",
          "language": "python"
        },
        {
          "code": "envmapcolor",
          "language": "python"
        },
        {
          "code": "envmapcolorr",
          "language": "python"
        },
        {
          "code": "envmapcolorg",
          "language": "python"
        },
        {
          "code": "envmapcolorb",
          "language": "python"
        },
        {
          "code": "envmaprotate",
          "language": "python"
        },
        {
          "code": "envmaprotatex",
          "language": "python"
        },
        {
          "code": "envmaprotatey",
          "language": "python"
        },
        {
          "code": "envmaprotatez",
          "language": "python"
        },
        {
          "code": "envmaptype2d",
          "language": "python"
        },
        {
          "code": "frontfacelit",
          "language": "python"
        },
        {
          "code": "backfacelit",
          "language": "python"
        },
        {
          "code": "outputshader",
          "language": "python"
        },
        {
          "code": "alphamapextendu",
          "language": "python"
        },
        {
          "code": "alphamapextendv",
          "language": "python"
        },
        {
          "code": "alphamapextendw",
          "language": "python"
        },
        {
          "code": "alphamapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "alphamapanisotropy",
          "language": "python"
        },
        {
          "code": "alphamapcoord",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "alphamapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "postmultalpha",
          "language": "python"
        },
        {
          "code": "alphamultlight",
          "language": "python"
        },
        {
          "code": "t0 + (t1 * (1.0 - t0.a))",
          "language": "python"
        },
        {
          "code": "t0.rgb + t1.rgb // Error\t\t\t\t\n vec4(t0.rgb + t1.rgb, 1.0)  // Works",
          "language": "python"
        },
        {
          "code": "multitexturing",
          "language": "python"
        },
        {
          "code": "texture1mapextendu",
          "language": "python"
        },
        {
          "code": "texture1mapextendv",
          "language": "python"
        },
        {
          "code": "texture1mapextendw",
          "language": "python"
        },
        {
          "code": "texture1mapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "texture1mapanisotropy",
          "language": "python"
        },
        {
          "code": "texture1coord",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "texture1coordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "texture2mapextendu",
          "language": "python"
        },
        {
          "code": "texture2mapextendv",
          "language": "python"
        },
        {
          "code": "texture2mapextendw",
          "language": "python"
        },
        {
          "code": "texture2mapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "texture2mapanisotropy",
          "language": "python"
        },
        {
          "code": "texture2coord",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "texture2coordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "texture3mapextendu",
          "language": "python"
        },
        {
          "code": "texture3mapextendv",
          "language": "python"
        },
        {
          "code": "texture3mapextendw",
          "language": "python"
        },
        {
          "code": "texture3mapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "texture3mapanisotropy",
          "language": "python"
        },
        {
          "code": "texture3coord",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "texture3coordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "texture4mapextendu",
          "language": "python"
        },
        {
          "code": "texture4mapextendv",
          "language": "python"
        },
        {
          "code": "texture4mapextendw",
          "language": "python"
        },
        {
          "code": "texture4mapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "texture4mapanisotropy",
          "language": "python"
        },
        {
          "code": "texture4coord",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "texture4coordnterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "multitexexpr",
          "language": "python"
        },
        {
          "code": "rimlight0enable",
          "language": "python"
        },
        {
          "code": "rimlight0map",
          "language": "python"
        },
        {
          "code": "rimlight0mapextendu",
          "language": "python"
        },
        {
          "code": "rimlight0mapextendv",
          "language": "python"
        },
        {
          "code": "rimlight0mapextendw",
          "language": "python"
        },
        {
          "code": "rimlight0mapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "rimlight0mapanisotropy",
          "language": "python"
        },
        {
          "code": "rimlight0mapcoord",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "rimlight0mapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "rimlight0color",
          "language": "python"
        },
        {
          "code": "rimlight0colorr",
          "language": "python"
        },
        {
          "code": "rimlight0colorg",
          "language": "python"
        },
        {
          "code": "rimlight0colorb",
          "language": "python"
        },
        {
          "code": "rimlight0center",
          "language": "python"
        },
        {
          "code": "rimlight0width",
          "language": "python"
        },
        {
          "code": "rimlight0strength",
          "language": "python"
        },
        {
          "code": "rimlight0strengthramp",
          "language": "python"
        },
        {
          "code": "shadowstrength",
          "language": "python"
        },
        {
          "code": "shadowcolor",
          "language": "python"
        },
        {
          "code": "shadowcolorr",
          "language": "python"
        },
        {
          "code": "shadowcolorg",
          "language": "python"
        },
        {
          "code": "shadowcolorb",
          "language": "python"
        },
        {
          "code": "darknessemit",
          "language": "python"
        },
        {
          "code": "darknessemitcolor",
          "language": "python"
        },
        {
          "code": "darknessemitcolorr",
          "language": "python"
        },
        {
          "code": "darknessemitcolorg",
          "language": "python"
        },
        {
          "code": "darknessemitcolorb",
          "language": "python"
        },
        {
          "code": "darknessemitmap",
          "language": "python"
        },
        {
          "code": "darknessemitmapextendu",
          "language": "python"
        },
        {
          "code": "darknessemitmapextendv",
          "language": "python"
        },
        {
          "code": "darknessemitmapextendw",
          "language": "python"
        },
        {
          "code": "darknessemitmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "darknessemitmapanisotropy",
          "language": "python"
        },
        {
          "code": "darknessemitmapcoord",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "darknessemitmapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "writecameradepthtoalpha",
          "language": "python"
        },
        {
          "code": "applypointcolor",
          "language": "python"
        },
        {
          "code": "instancetexture",
          "language": "python"
        },
        {
          "code": "darknessemitmap",
          "language": "python"
        },
        {
          "code": "rimlight0map",
          "language": "python"
        },
        {
          "code": "color0output",
          "language": "python"
        },
        {
          "code": "worldspaceposition",
          "language": "python"
        },
        {
          "code": "worldspacenormal",
          "language": "python"
        },
        {
          "code": "cameraspaceposition",
          "language": "python"
        },
        {
          "code": "cameraspacenormal",
          "language": "python"
        },
        {
          "code": "texturecoord0",
          "language": "python"
        },
        {
          "code": "difflighting",
          "language": "python"
        },
        {
          "code": "finaldiffcolor",
          "language": "python"
        },
        {
          "code": "speclighting",
          "language": "python"
        },
        {
          "code": "spec2lighting",
          "language": "python"
        },
        {
          "code": "finalspeccolor",
          "language": "python"
        },
        {
          "code": "shadowstrength",
          "language": "python"
        },
        {
          "code": "normalizedshadowstrength",
          "language": "python"
        },
        {
          "code": "skelrootpath",
          "language": "python"
        },
        {
          "code": "Final Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "separatealphafunc",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "blendconstant",
          "language": "python"
        },
        {
          "code": "blendconstantr",
          "language": "python"
        },
        {
          "code": "blendconstantg",
          "language": "python"
        },
        {
          "code": "blendconstantb",
          "language": "python"
        },
        {
          "code": "blendconstanta",
          "language": "python"
        },
        {
          "code": "legacyalphabehavior",
          "language": "python"
        },
        {
          "code": "postmultalpha",
          "language": "python"
        },
        {
          "code": "pointcolorpremult",
          "language": "python"
        },
        {
          "code": "alreadypremult",
          "language": "python"
        },
        {
          "code": "premultinshader",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "depthwriting",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "alphathreshold",
          "language": "python"
        },
        {
          "code": "polygonoffset",
          "language": "python"
        },
        {
          "code": "polygonoffsetfactor",
          "language": "python"
        },
        {
          "code": "polygonoffsetunits",
          "language": "python"
        },
        {
          "code": "/project1/moviein1",
          "language": "python"
        },
        {
          "code": "/geo1/circle1",
          "language": "python"
        }
      ],
      "shortcuts": [],
      "performanceNotes": [
        "The cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.",
        "The OpenGL (pre-2022) or Vulkan (2022-) code that runs on the GPU and creates rendered images from polygons and textures. A shader is programmed in Text DATs and referenced by a GLSL Material or a GLSL TOP. Shaders are composed of up to three parts: Vertex Shader, Pixel Shader and Compute Shader.",
        "An Operator Family that creates, composites and modifies images, and reads/writes images and movies to/from files and the network. TOPs run on the graphics card's GPU.",
        "A Operator Family that reads, creates and modifies 3D points, polygons, lines, particles, surfaces, spheres and meatballs. Particles and point clouds are now done primarily on the GPU using TOPs."
      ],
      "subcategory": "Shaders",
      "useCases": [
        "3D scene visualization",
        "Real-time graphics rendering",
        "Multi-pass rendering workflows",
        "Shadow and reflection generation"
      ],
      "url": "https://docs.derivative.ca/Phong_MAT",
      "scraped": true,
      "scrapedAt": "2025-08-01T23:56:21.434Z",
      "parameterCount": 59
    },
    {
      "name": "Experimental:Phong",
      "fullName": "Experimental:Phong MAT",
      "category": "MAT",
      "description": "The Phong MAT creates a material using the Phong Shading model. It has support for textures, reflections, bumps, cone lights, rim lights, alpha maps and more. You can output its GLSL shader into two DATs for further adaptation in a GLSL MAT by using the Output Shader parameter.\n\nPhong Shading models three types of reflected light:\n\nPhong Shading produces very nice specular highlights, although it is still an approximation and not physically accurate.  Contrasting with the Gouraud shading model that calculates the lighting at each vertex and interpolates the value across the polygon, Phong calculates the lighting at each pixel.\n\nTo see how all of the different parts are summed together by looking at the Phong Lighting Equation article.\n\nphongMAT_Class\n\nNote: Simply applying alpha to an object does not make it transparent. For more information refer to the Transparency article.\n\nOn the Multi-texturing page of the Phong material, you can have up to 4 texture maps and choose any of the 8 possible texture coordinates for each map. By default the texture maps are multiplied together, but there is a field for a custom GLSL code that can be used. Here's how that works:\n\nThe 4 texture maps are referred to in the parameter by t0, t1, t2 and t3 respectively. So the default equation if all 4 texture maps are used is: t0 * t1 * t2 * t3. You can use and constants and other math operators, so for example t0 + (t1 * 0.5) is valid. If they refer to a map that doesn't exist, the shader won't compile correctly (e.g. using t3 when it isn't set or the TOP doesn't exist).\n\nThey can also refer to specific components of the texture using .r .g .b and .a. So for example if you want to do t0 over t1, the expression would be:\n\nThe output from your expression must be a vec4, so for example:\n\nThe alpha from the result of these maps is used.\n\nOther rim lights have the same parameters, internal parameter names just have a different number instead of 1.\n\nRefer to the  Deform Article for more information on doing deforms in TouchDesigner.\n\nBlending is summing the color value of the pixel being drawn and the pixel currently present in the Color-Buffer. Blending is typically used to simulate Transparency.\n\t\tThe blending equation is:\n\t\tFinal Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)\n\nDepth-Testing is comparing the depth value of the pixel being drawn with the pixel currently in the Frame-Buffer. A pixel that is determined to be in-front of the pixel currently in the Frame-Buffer will be drawn over it. Pixels that are determined to be behind the pixel currently in the Frame-Buffer will not be drawn. Depth-Testing allows geometry in a 3D scene to occlude geometry behind it, and be occluded by geometry in-front of it regardless of the order the geometry was drawn.\n\nFor a more detailed description of Depth-Testing, refer to the Depth-Test article.\n\nAlpha-testing allows you to choose to draw or not draw a pixel based on its alpha value.\n\nThe wire-frame feature will render the geometry as wire-frame, using the actual primitive type used in the render. What this means is surfaces like Metaballs, NURBs and Beziers will become a wire-frame of the triangles/triangle-strips used to render them (since these types of primitives can't be natively rendered in OpenGL).\n\nThe cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.\n\nThis feature pushes the polygons back into space a tiny fraction. This is useful when you are rendering two polygons directly on-top of each other and are experiencing Z-Fighting. Refer to Polygon Depth Offset for more information. This is also an important feature when doing shadows.\n\nExtra Information for the Phong MAT can be accessed via an Info CHOP.\n\nTouchDesigner Build: Latest\\nwikieditorwikieditorwikieditorwikieditorError while fetching data from URL https://3.131.208.175/api.php?action=query&list=categorymembers&cmtitle=Category:MATs&format=xml&cmlimit=500: $2.Error fetching URL: SSL: certificate subject name '*.derivative.ca' does not match target host name '3.131.208.175'There was a problem during the HTTP request: 0 ErrorCould not get URL https://3.131.208.175/api.php?action=query&list=categorymembers&cmtitle=Category:MATs&format=xml&cmlimit=500 after 3 tries.",
      "parameters": [
        {
          "name": "ambdiff",
          "label": "Ambdiff",
          "description": "Ambdiff parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "diff",
          "label": "Diff",
          "description": "Diff parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "amb",
          "label": "Amb",
          "description": "Amb parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "spec",
          "label": "Spec",
          "description": "Spec parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "emit",
          "label": "Emit",
          "description": "Emit parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "constant",
          "label": "Constant",
          "description": "Constant parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "shininess",
          "label": "Shininess",
          "description": "Shininess parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "colormap",
          "label": "Colormap",
          "description": "Colormap parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "normalmap",
          "label": "Normalmap",
          "description": "Normalmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "bumpscale",
          "label": "Bumpscale",
          "description": "Bumpscale parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "heightmapenable",
          "label": "Heightmapenable",
          "description": "Heightmapenable parameter",
          "type": "Toggle",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "heightmap",
          "label": "Heightmap",
          "description": "Heightmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "parallaxscale",
          "label": "Parallaxscale",
          "description": "Parallaxscale parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "parallaxocclusion",
          "label": "Parallaxocclusion",
          "description": "Parallaxocclusion parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "displaceverts",
          "label": "Displaceverts",
          "description": "Displaceverts parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "displacescale",
          "label": "Displacescale",
          "description": "Displacescale parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "displacemid",
          "label": "Displacemid",
          "description": "Displacemid parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "diffusemap",
          "label": "Diffusemap",
          "description": "Diffusemap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "specmap",
          "label": "Specmap",
          "description": "Specmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "emitmap",
          "label": "Emitmap",
          "description": "Emitmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "envmap",
          "label": "Envmap",
          "description": "Envmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "envmapcolor",
          "label": "Envmapcolor",
          "description": "Envmapcolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "envmaprotate",
          "label": "Envmaprotate",
          "description": "Envmaprotate parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "envmaptype2d",
          "label": "Envmaptype2d",
          "description": "Envmaptype2d parameter",
          "type": "Menu",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "frontfacelit",
          "label": "Frontfacelit",
          "description": "Frontfacelit parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "backfacelit",
          "label": "Backfacelit",
          "description": "Backfacelit parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "outputshader",
          "label": "Outputshader",
          "description": "Outputshader parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "RGB Page"
        },
        {
          "name": "alphamap",
          "label": "Alphamap",
          "description": "Alphamap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Alpha Page"
        },
        {
          "name": "alphamode",
          "label": "Alphamode",
          "description": "Alphamode parameter",
          "type": "Menu",
          "default": "",
          "range": null,
          "options": null,
          "section": "Alpha Page"
        },
        {
          "name": "alphafront",
          "label": "Alphafront",
          "description": "Alphafront parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Alpha Page"
        },
        {
          "name": "alphaside",
          "label": "Alphaside",
          "description": "Alphaside parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Alpha Page"
        },
        {
          "name": "rolloff",
          "label": "Rolloff",
          "description": "Rolloff parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Alpha Page"
        },
        {
          "name": "postmultalpha",
          "label": "Postmultalpha",
          "description": "Postmultalpha parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Alpha Page"
        },
        {
          "name": "alphamultlight",
          "label": "Alphamultlight",
          "description": "Alphamultlight parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Alpha Page"
        },
        {
          "name": "multitexturing",
          "label": "Multitexturing",
          "description": "Multitexturing parameter",
          "type": "Str",
          "default": "",
          "range": null,
          "options": null,
          "section": "Multi-Texturing Page"
        },
        {
          "name": "texture1",
          "label": "Texture1",
          "description": "Texture1 parameter",
          "type": "Str",
          "default": "",
          "range": null,
          "options": null,
          "section": "Multi-Texturing Page"
        },
        {
          "name": "texture2",
          "label": "Texture2",
          "description": "Texture2 parameter",
          "type": "Str",
          "default": "",
          "range": null,
          "options": null,
          "section": "Multi-Texturing Page"
        },
        {
          "name": "texture3",
          "label": "Texture3",
          "description": "Texture3 parameter",
          "type": "Str",
          "default": "",
          "range": null,
          "options": null,
          "section": "Multi-Texturing Page"
        },
        {
          "name": "texture4",
          "label": "Texture4",
          "description": "Texture4 parameter",
          "type": "Str",
          "default": "",
          "range": null,
          "options": null,
          "section": "Multi-Texturing Page"
        },
        {
          "name": "multitexexpr",
          "label": "Multitexexpr",
          "description": "Multitexexpr parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Multi-Texturing Page"
        },
        {
          "name": "rimlight",
          "label": "Rimlight",
          "description": "Rimlight parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Rim Page"
        },
        {
          "name": "shadowstrength",
          "label": "Shadowstrength",
          "description": "Shadowstrength parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "shadowcolor",
          "label": "Shadowcolor",
          "description": "Shadowcolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "darknessemit",
          "label": "Darknessemit",
          "description": "Darknessemit parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "darknessemitcolor",
          "label": "Darknessemitcolor",
          "description": "Darknessemitcolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "darknessemitmap",
          "label": "Darknessemitmap",
          "description": "Darknessemitmap parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "spec2",
          "label": "Spec2",
          "description": "Spec2 parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "shininess2",
          "label": "Shininess2",
          "description": "Shininess2 parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "writecameradepthtoalpha",
          "label": "Writecameradepthtoalpha",
          "description": "Writecameradepthtoalpha parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "applypointcolor",
          "label": "Applypointcolor",
          "description": "Applypointcolor parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "instancetexture",
          "label": "Instancetexture",
          "description": "Instancetexture parameter",
          "type": "Str",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "color",
          "label": "Color",
          "description": "Color parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Advanced Page"
        },
        {
          "name": "dodeform",
          "label": "Dodeform",
          "description": "Dodeform parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "deformdata",
          "label": "Deformdata",
          "description": "Deformdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "targetsop",
          "label": "Targetsop",
          "description": "Targetsop parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptpath",
          "label": "Pcaptpath",
          "description": "Pcaptpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptdata",
          "label": "Pcaptdata",
          "description": "Pcaptdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "skelrootpath",
          "label": "Skelrootpath",
          "description": "Skelrootpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "mat",
          "label": "Mat",
          "description": "Mat parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        }
      ],
      "inputs": [],
      "outputs": [
        {
          "type": "MAT",
          "description": "MAT output",
          "index": 0
        }
      ],
      "examples": [],
      "tips": [
        "NOTE: We see the color of an object because of the color of light that the material reflects.",
        "Note: Simply applying alpha to an object does not make it transparent. For more information refer to the Transparency article."
      ],
      "related": [],
      "codeSnippets": [
        {
          "code": "colormapextendu",
          "language": "python"
        },
        {
          "code": "colormapextendv",
          "language": "python"
        },
        {
          "code": "colormapextendw",
          "language": "python"
        },
        {
          "code": "colormapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "colormapanisotropy",
          "language": "python"
        },
        {
          "code": "texturesamplingmode",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "colormapcoord",
          "language": "python"
        },
        {
          "code": "colormapcoordattrib",
          "language": "python"
        },
        {
          "code": "colormapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "normalmapextendu",
          "language": "python"
        },
        {
          "code": "normalmapextendv",
          "language": "python"
        },
        {
          "code": "normalmapextendw",
          "language": "python"
        },
        {
          "code": "normalmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "normalmapanisotropy",
          "language": "python"
        },
        {
          "code": "normalmapsamplingmode",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "normalmapcoord",
          "language": "python"
        },
        {
          "code": "normalmapcoordattrib",
          "language": "python"
        },
        {
          "code": "normalmapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "heightmapenable",
          "language": "python"
        },
        {
          "code": "heightmapextendu",
          "language": "python"
        },
        {
          "code": "heightmapextendv",
          "language": "python"
        },
        {
          "code": "heightmapextendw",
          "language": "python"
        },
        {
          "code": "heightmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "heightmapanisotropy",
          "language": "python"
        },
        {
          "code": "heightmapsamplingmode",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "heightmapcoord",
          "language": "python"
        },
        {
          "code": "heightmapcoordattrib",
          "language": "python"
        },
        {
          "code": "heightmapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "heightmapchannelsource",
          "language": "python"
        },
        {
          "code": "parallaxscale",
          "language": "python"
        },
        {
          "code": "parallaxocclusion",
          "language": "python"
        },
        {
          "code": "displaceverts",
          "language": "python"
        },
        {
          "code": "displacescale",
          "language": "python"
        },
        {
          "code": "displacemid",
          "language": "python"
        },
        {
          "code": "diffusemapextendu",
          "language": "python"
        },
        {
          "code": "diffusemapextendv",
          "language": "python"
        },
        {
          "code": "diffusemapextendw",
          "language": "python"
        },
        {
          "code": "diffusemapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "diffusemapanisotropy",
          "language": "python"
        },
        {
          "code": "diffusemapsamplingmode",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "diffusemapcoord",
          "language": "python"
        },
        {
          "code": "diffusemapcoordattrib",
          "language": "python"
        },
        {
          "code": "diffusemapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "specmapextendu",
          "language": "python"
        },
        {
          "code": "specmapextendv",
          "language": "python"
        },
        {
          "code": "specmapextendw",
          "language": "python"
        },
        {
          "code": "specmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "specmapanisotropy",
          "language": "python"
        },
        {
          "code": "specmapsamplingmode",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "specmapcoord",
          "language": "python"
        },
        {
          "code": "specmapcoordattrib",
          "language": "python"
        },
        {
          "code": "specmapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "emitmapextendu",
          "language": "python"
        },
        {
          "code": "emitmapextendv",
          "language": "python"
        },
        {
          "code": "emitmapextendw",
          "language": "python"
        },
        {
          "code": "emitmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "emitmapanisotropy",
          "language": "python"
        },
        {
          "code": "emitmapsamplingmode",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "emitmapcoord",
          "language": "python"
        },
        {
          "code": "emitmapcoordattrib",
          "language": "python"
        },
        {
          "code": "emitmapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "envmapextendu",
          "language": "python"
        },
        {
          "code": "envmapextendv",
          "language": "python"
        },
        {
          "code": "envmapextendw",
          "language": "python"
        },
        {
          "code": "envmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "envmapanisotropy",
          "language": "python"
        },
        {
          "code": "envmapcolor",
          "language": "python"
        },
        {
          "code": "envmapcolorr",
          "language": "python"
        },
        {
          "code": "envmapcolorg",
          "language": "python"
        },
        {
          "code": "envmapcolorb",
          "language": "python"
        },
        {
          "code": "envmaprotate",
          "language": "python"
        },
        {
          "code": "envmaprotatex",
          "language": "python"
        },
        {
          "code": "envmaprotatey",
          "language": "python"
        },
        {
          "code": "envmaprotatez",
          "language": "python"
        },
        {
          "code": "envmaptype2d",
          "language": "python"
        },
        {
          "code": "frontfacelit",
          "language": "python"
        },
        {
          "code": "backfacelit",
          "language": "python"
        },
        {
          "code": "outputshader",
          "language": "python"
        },
        {
          "code": "alphamapextendu",
          "language": "python"
        },
        {
          "code": "alphamapextendv",
          "language": "python"
        },
        {
          "code": "alphamapextendw",
          "language": "python"
        },
        {
          "code": "alphamapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "alphamapanisotropy",
          "language": "python"
        },
        {
          "code": "alphamapsamplingmode",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "alphamapcoord",
          "language": "python"
        },
        {
          "code": "alphamapcoordattrib",
          "language": "python"
        },
        {
          "code": "alphamapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "postmultalpha",
          "language": "python"
        },
        {
          "code": "alphamultlight",
          "language": "python"
        },
        {
          "code": "t0 + (t1 * (1.0 - t0.a))",
          "language": "python"
        },
        {
          "code": "t0.rgb + t1.rgb // Error\t\t\t\t\n vec4(t0.rgb + t1.rgb, 1.0)  // Works",
          "language": "python"
        },
        {
          "code": "multitexturing",
          "language": "python"
        },
        {
          "code": "texture1mapextendu",
          "language": "python"
        },
        {
          "code": "texture1mapextendv",
          "language": "python"
        },
        {
          "code": "texture1mapextendw",
          "language": "python"
        },
        {
          "code": "texture1mapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "texture1mapanisotropy",
          "language": "python"
        },
        {
          "code": "texture1coordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "texture1samplingmode",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "texture1coord",
          "language": "python"
        },
        {
          "code": "texture1mapcoordattr",
          "language": "python"
        },
        {
          "code": "texture2mapextendu",
          "language": "python"
        },
        {
          "code": "texture2mapextendv",
          "language": "python"
        },
        {
          "code": "texture2mapextendw",
          "language": "python"
        },
        {
          "code": "texture2mapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "texture2mapanisotropy",
          "language": "python"
        },
        {
          "code": "texture2coordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "texture2samplingmode",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "texture2coord",
          "language": "python"
        },
        {
          "code": "texture2mapcoordattr",
          "language": "python"
        },
        {
          "code": "texture3mapextendu",
          "language": "python"
        },
        {
          "code": "texture3mapextendv",
          "language": "python"
        },
        {
          "code": "texture3mapextendw",
          "language": "python"
        },
        {
          "code": "texture3mapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "texture3mapanisotropy",
          "language": "python"
        },
        {
          "code": "texture3coordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "texture3samplingmode",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "texture3coord",
          "language": "python"
        },
        {
          "code": "texture3mapcoordattr",
          "language": "python"
        },
        {
          "code": "texture4mapextendu",
          "language": "python"
        },
        {
          "code": "texture4mapextendv",
          "language": "python"
        },
        {
          "code": "texture4mapextendw",
          "language": "python"
        },
        {
          "code": "texture4mapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "texture4mapanisotropy",
          "language": "python"
        },
        {
          "code": "texture4coordnterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "texture4samplingmode",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "texture4coord",
          "language": "python"
        },
        {
          "code": "texture4mapcoordattr",
          "language": "python"
        },
        {
          "code": "multitexexpr",
          "language": "python"
        },
        {
          "code": "rimlight0enable",
          "language": "python"
        },
        {
          "code": "rimlight0map",
          "language": "python"
        },
        {
          "code": "rimlight0mapextendu",
          "language": "python"
        },
        {
          "code": "rimlight0mapextendv",
          "language": "python"
        },
        {
          "code": "rimlight0mapextendw",
          "language": "python"
        },
        {
          "code": "rimlight0mapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "rimlight0mapanisotropy",
          "language": "python"
        },
        {
          "code": "rimlight0mapsamplingmode",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "rimlight0mapcoord",
          "language": "python"
        },
        {
          "code": "rimlight0mapcoordattr",
          "language": "python"
        },
        {
          "code": "rimlight0mapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "rimlight0color",
          "language": "python"
        },
        {
          "code": "rimlight0colorr",
          "language": "python"
        },
        {
          "code": "rimlight0colorg",
          "language": "python"
        },
        {
          "code": "rimlight0colorb",
          "language": "python"
        },
        {
          "code": "rimlight0center",
          "language": "python"
        },
        {
          "code": "rimlight0width",
          "language": "python"
        },
        {
          "code": "rimlight0strength",
          "language": "python"
        },
        {
          "code": "rimlight0strengthramp",
          "language": "python"
        },
        {
          "code": "shadowstrength",
          "language": "python"
        },
        {
          "code": "shadowcolor",
          "language": "python"
        },
        {
          "code": "shadowcolorr",
          "language": "python"
        },
        {
          "code": "shadowcolorg",
          "language": "python"
        },
        {
          "code": "shadowcolorb",
          "language": "python"
        },
        {
          "code": "darknessemit",
          "language": "python"
        },
        {
          "code": "darknessemitcolor",
          "language": "python"
        },
        {
          "code": "darknessemitcolorr",
          "language": "python"
        },
        {
          "code": "darknessemitcolorg",
          "language": "python"
        },
        {
          "code": "darknessemitcolorb",
          "language": "python"
        },
        {
          "code": "darknessemitmap",
          "language": "python"
        },
        {
          "code": "darknessemitmapextendu",
          "language": "python"
        },
        {
          "code": "darknessemitmapextendv",
          "language": "python"
        },
        {
          "code": "darknessemitmapextendw",
          "language": "python"
        },
        {
          "code": "darknessemitmapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "darknessemitmapanisotropy",
          "language": "python"
        },
        {
          "code": "darknessemitmapsamplingmode",
          "language": "python"
        },
        {
          "code": "screenspace",
          "language": "python"
        },
        {
          "code": "darknessemitmapcoord",
          "language": "python"
        },
        {
          "code": "darknessemitmapcoordattrib",
          "language": "python"
        },
        {
          "code": "darknessemitmapcoordinterp",
          "language": "python"
        },
        {
          "code": "perspectivecorrect",
          "language": "python"
        },
        {
          "code": "writecameradepthtoalpha",
          "language": "python"
        },
        {
          "code": "applypointcolor",
          "language": "python"
        },
        {
          "code": "instancetexture",
          "language": "python"
        },
        {
          "code": "darknessemitmap",
          "language": "python"
        },
        {
          "code": "rimlight0map",
          "language": "python"
        },
        {
          "code": "color0output",
          "language": "python"
        },
        {
          "code": "worldspaceposition",
          "language": "python"
        },
        {
          "code": "worldspacenormal",
          "language": "python"
        },
        {
          "code": "cameraspaceposition",
          "language": "python"
        },
        {
          "code": "cameraspacenormal",
          "language": "python"
        },
        {
          "code": "texturecoord0",
          "language": "python"
        },
        {
          "code": "difflighting",
          "language": "python"
        },
        {
          "code": "finaldiffcolor",
          "language": "python"
        },
        {
          "code": "speclighting",
          "language": "python"
        },
        {
          "code": "spec2lighting",
          "language": "python"
        },
        {
          "code": "finalspeccolor",
          "language": "python"
        },
        {
          "code": "shadowstrength",
          "language": "python"
        },
        {
          "code": "normalizedshadowstrength",
          "language": "python"
        },
        {
          "code": "skelrootpath",
          "language": "python"
        },
        {
          "code": "Final Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "separatealphafunc",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "blendconstant",
          "language": "python"
        },
        {
          "code": "blendconstantr",
          "language": "python"
        },
        {
          "code": "blendconstantg",
          "language": "python"
        },
        {
          "code": "blendconstantb",
          "language": "python"
        },
        {
          "code": "blendconstanta",
          "language": "python"
        },
        {
          "code": "legacyalphabehavior",
          "language": "python"
        },
        {
          "code": "postmultalpha",
          "language": "python"
        },
        {
          "code": "pointcolorpremult",
          "language": "python"
        },
        {
          "code": "alreadypremult",
          "language": "python"
        },
        {
          "code": "premultinshader",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "depthwriting",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "alphathreshold",
          "language": "python"
        },
        {
          "code": "polygonoffset",
          "language": "python"
        },
        {
          "code": "polygonoffsetfactor",
          "language": "python"
        },
        {
          "code": "polygonoffsetunits",
          "language": "python"
        },
        {
          "code": "/project1/moviein1",
          "language": "python"
        },
        {
          "code": "/geo1/circle1",
          "language": "python"
        }
      ],
      "shortcuts": [],
      "performanceNotes": [
        "The cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.",
        "The OpenGL (pre-2022) or Vulkan (2022-) code that runs on the GPU and creates rendered images from polygons and textures. A shader is programmed in Text DATs and referenced by a GLSL Material or a GLSL TOP. Shaders are composed of up to three parts: Vertex Shader, Pixel Shader and Compute Shader.",
        "An Operator Family that creates, composites and modifies images, and reads/writes images and movies to/from files and the network. TOPs run on the graphics card's GPU.",
        "A Operator Family that reads, creates and modifies 3D points, polygons, lines, particles, surfaces, spheres and meatballs. Particles and point clouds are now done primarily on the GPU using TOPs."
      ],
      "subcategory": "Shaders",
      "useCases": [
        "3D scene visualization",
        "Real-time graphics rendering",
        "Multi-pass rendering workflows",
        "Shadow and reflection generation"
      ],
      "url": "https://docs.derivative.ca/Experimental:Phong_MAT",
      "scraped": true,
      "scrapedAt": "2025-08-01T23:56:21.486Z",
      "parameterCount": 59
    },
    {
      "name": "Point Sprite",
      "fullName": "Point Sprite MAT",
      "category": "MAT",
      "description": "The Point Sprite MAT allows you to control some attributes of Point Sprites (creatable using the Particle SOP, DAT to SOP, or Convert SOP). You can apply color, a color map, change the size of the created point sprite from a square to a rectangle, and scale the size of the point sprite.\n\nA point sprite's final size controls the number of pixels wide/high it is, regardless of how far it is from the camera (unless you are using attenuation).\n\npointspriteMAT_Class\n\nRefer to the  Deform Article for more information on doing deforms in TouchDesigner.\n\nBlending is summing the color value of the pixel being drawn and the pixel currently present in the Color-Buffer. Blending is typically used to simulate Transparency.\n\t\tThe blending equation is:\n\t\tFinal Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)\n\nDepth-Testing is comparing the depth value of the pixel being drawn with the pixel currently in the Frame-Buffer. A pixel that is determined to be in-front of the pixel currently in the Frame-Buffer will be drawn over it. Pixels that are determined to be behind the pixel currently in the Frame-Buffer will not be drawn. Depth-Testing allows geometry in a 3D scene to occlude geometry behind it, and be occluded by geometry in-front of it regardless of the order the geometry was drawn.\n\nFor a more detailed description of Depth-Testing, refer to the Depth-Test article.\n\nAlpha-testing allows you to choose to draw or not draw a pixel based on its alpha value.\n\nThe wire-frame feature will render the geometry as wire-frame, using the actual primitive type used in the render. What this means is surfaces like Metaballs, NURBs and Beziers will become a wire-frame of the triangles/triangle-strips used to render them (since these types of primitives can't be natively rendered in OpenGL).\n\nThe cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.\n\nThis feature pushes the polygons back into space a tiny fraction. This is useful when you are rendering two polygons directly on-top of each other and are experiencing Z-Fighting. Refer to Polygon Depth Offset for more information. This is also an important feature when doing shadows.\n\nExtra Information for the Point Sprite MAT can be accessed via an Info CHOP.\n\nTouchDesigner Build: Latest\\n2021.100002018.28070before 2018.28070",
      "parameters": [
        {
          "name": "color",
          "label": "Color",
          "description": "Color parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "alpha",
          "label": "Alpha",
          "description": "Alpha parameter",
          "type": "Menu",
          "default": "",
          "range": null,
          "options": [
            {
              "label": "Already",
              "value": "Pre",
              "description": "Multiplied By AlphaÂ alreadypremult -"
            }
          ],
          "section": "Point Sprite Page"
        },
        {
          "name": "postmultalpha",
          "label": "Postmultalpha",
          "description": "Postmultalpha parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "colormap",
          "label": "Colormap",
          "description": "Colormap parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "offsetleft",
          "label": "Offsetleft",
          "description": "Offsetleft parameter",
          "type": "XY",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "offsetright",
          "label": "Offsetright",
          "description": "Offsetright parameter",
          "type": "XY",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "offsetbottom",
          "label": "Offsetbottom",
          "description": "Offsetbottom parameter",
          "type": "XY",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "offsettop",
          "label": "Offsettop",
          "description": "Offsettop parameter",
          "type": "XY",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "pointscale",
          "label": "Pointscale",
          "description": "Pointscale parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "attenpscale",
          "label": "Attenpscale",
          "description": "Attenpscale parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "attennear",
          "label": "Attennear",
          "description": "Attennear parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "attenfar",
          "label": "Attenfar",
          "description": "Attenfar parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "attensizenear",
          "label": "Attensizenear",
          "description": "Attensizenear parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "attensizefar",
          "label": "Attensizefar",
          "description": "Attensizefar parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "dodeform",
          "label": "Dodeform",
          "description": "Dodeform parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "deformdata",
          "label": "Deformdata",
          "description": "Deformdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "targetsop",
          "label": "Targetsop",
          "description": "Targetsop parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptpath",
          "label": "Pcaptpath",
          "description": "Pcaptpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptdata",
          "label": "Pcaptdata",
          "description": "Pcaptdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "skelrootpath",
          "label": "Skelrootpath",
          "description": "Skelrootpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "mat",
          "label": "Mat",
          "description": "Mat parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        }
      ],
      "inputs": [],
      "outputs": [
        {
          "type": "MAT",
          "description": "MAT output",
          "index": 0
        }
      ],
      "examples": [],
      "tips": [],
      "related": [],
      "codeSnippets": [
        {
          "code": "postmultalpha",
          "language": "python"
        },
        {
          "code": "colormapextendu",
          "language": "python"
        },
        {
          "code": "colormapextendv",
          "language": "python"
        },
        {
          "code": "colormapextendw",
          "language": "python"
        },
        {
          "code": "colormapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "colormapanisotropy",
          "language": "python"
        },
        {
          "code": "offsetright",
          "language": "python"
        },
        {
          "code": "offsetbottom",
          "language": "python"
        },
        {
          "code": "attenpscale",
          "language": "python"
        },
        {
          "code": "attensizenear",
          "language": "python"
        },
        {
          "code": "attensizefar",
          "language": "python"
        },
        {
          "code": "skelrootpath",
          "language": "python"
        },
        {
          "code": "Final Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "separatealphafunc",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "blendconstant",
          "language": "python"
        },
        {
          "code": "blendconstantr",
          "language": "python"
        },
        {
          "code": "blendconstantg",
          "language": "python"
        },
        {
          "code": "blendconstantb",
          "language": "python"
        },
        {
          "code": "blendconstanta",
          "language": "python"
        },
        {
          "code": "legacyalphabehavior",
          "language": "python"
        },
        {
          "code": "postmultalpha",
          "language": "python"
        },
        {
          "code": "pointcolorpremult",
          "language": "python"
        },
        {
          "code": "alreadypremult",
          "language": "python"
        },
        {
          "code": "premultinshader",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "depthwriting",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "alphathreshold",
          "language": "python"
        },
        {
          "code": "polygonoffset",
          "language": "python"
        },
        {
          "code": "polygonoffsetfactor",
          "language": "python"
        },
        {
          "code": "polygonoffsetunits",
          "language": "python"
        },
        {
          "code": "/project1/moviein1",
          "language": "python"
        },
        {
          "code": "/geo1/circle1",
          "language": "python"
        }
      ],
      "shortcuts": [],
      "performanceNotes": [
        "The cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.",
        "A Operator Family that reads, creates and modifies 3D points, polygons, lines, particles, surfaces, spheres and meatballs. Particles and point clouds are now done primarily on the GPU using TOPs.",
        "The OpenGL (pre-2022) or Vulkan (2022-) code that runs on the GPU and creates rendered images from polygons and textures. A shader is programmed in Text DATs and referenced by a GLSL Material or a GLSL TOP. Shaders are composed of up to three parts: Vertex Shader, Pixel Shader and Compute Shader.",
        "An Operator Family that creates, composites and modifies images, and reads/writes images and movies to/from files and the network. TOPs run on the graphics card's GPU."
      ],
      "subcategory": "General",
      "useCases": [
        "3D scene visualization",
        "Real-time graphics rendering",
        "Multi-pass rendering workflows",
        "Shadow and reflection generation"
      ],
      "url": "https://docs.derivative.ca/Point_Sprite_MAT",
      "scraped": true,
      "scrapedAt": "2025-08-01T23:56:21.518Z",
      "parameterCount": 21
    },
    {
      "name": "Experimental:Point Sprite",
      "fullName": "Experimental:Point Sprite MAT",
      "category": "MAT",
      "description": "The Point Sprite MAT allows you to control some attributes of Point Sprites (creatable using the Particle SOP, DAT to SOP, or Convert SOP). You can apply color, a color map, change the size of the created point sprite from a square to a rectangle, and scale the size of the point sprite.\n\nA point sprite's final size controls the number of pixels wide/high it is, regardless of how far it is from the camera (unless you are using attenuation).\n\npointspriteMAT_Class\n\nRefer to the  Deform Article for more information on doing deforms in TouchDesigner.\n\nBlending is summing the color value of the pixel being drawn and the pixel currently present in the Color-Buffer. Blending is typically used to simulate Transparency.\n\t\tThe blending equation is:\n\t\tFinal Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)\n\nDepth-Testing is comparing the depth value of the pixel being drawn with the pixel currently in the Frame-Buffer. A pixel that is determined to be in-front of the pixel currently in the Frame-Buffer will be drawn over it. Pixels that are determined to be behind the pixel currently in the Frame-Buffer will not be drawn. Depth-Testing allows geometry in a 3D scene to occlude geometry behind it, and be occluded by geometry in-front of it regardless of the order the geometry was drawn.\n\nFor a more detailed description of Depth-Testing, refer to the Depth-Test article.\n\nAlpha-testing allows you to choose to draw or not draw a pixel based on its alpha value.\n\nThe wire-frame feature will render the geometry as wire-frame, using the actual primitive type used in the render. What this means is surfaces like Metaballs, NURBs and Beziers will become a wire-frame of the triangles/triangle-strips used to render them (since these types of primitives can't be natively rendered in OpenGL).\n\nThe cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.\n\nThis feature pushes the polygons back into space a tiny fraction. This is useful when you are rendering two polygons directly on-top of each other and are experiencing Z-Fighting. Refer to Polygon Depth Offset for more information. This is also an important feature when doing shadows.\n\nExtra Information for the Point Sprite MAT can be accessed via an Info CHOP.\n\nError while fetching data from URL https://3.131.208.175/api.php?action=query&list=categorymembers&cmtitle=Category:MATs&format=xml&cmlimit=500: $2.Error fetching URL: SSL: certificate subject name '*.derivative.ca' does not match target host name '3.131.208.175'There was a problem during the HTTP request: 0 ErrorCould not get URL https://3.131.208.175/api.php?action=query&list=categorymembers&cmtitle=Category:MATs&format=xml&cmlimit=500 after 3 tries.",
      "parameters": [
        {
          "name": "color",
          "label": "Color",
          "description": "Color parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "alpha",
          "label": "Alpha",
          "description": "Alpha parameter",
          "type": "Menu",
          "default": "",
          "range": null,
          "options": [
            {
              "label": "Already",
              "value": "Pre",
              "description": "Multiplied By AlphaÂ alreadypremult -"
            }
          ],
          "section": "Point Sprite Page"
        },
        {
          "name": "postmultalpha",
          "label": "Postmultalpha",
          "description": "Postmultalpha parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "colormap",
          "label": "Colormap",
          "description": "Colormap parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "offsetleft",
          "label": "Offsetleft",
          "description": "Offsetleft parameter",
          "type": "XY",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "offsetright",
          "label": "Offsetright",
          "description": "Offsetright parameter",
          "type": "XY",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "offsetbottom",
          "label": "Offsetbottom",
          "description": "Offsetbottom parameter",
          "type": "XY",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "offsettop",
          "label": "Offsettop",
          "description": "Offsettop parameter",
          "type": "XY",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "pointsize",
          "label": "Pointsize",
          "description": "Pointsize parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "sizingmodel",
          "label": "Sizingmodel",
          "description": "Sizingmodel parameter",
          "type": "Menu",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "attenpscale",
          "label": "Attenpscale",
          "description": "Attenpscale parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "attennear",
          "label": "Attennear",
          "description": "Attennear parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "attenfar",
          "label": "Attenfar",
          "description": "Attenfar parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "attensizenear",
          "label": "Attensizenear",
          "description": "Attensizenear parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "attensizefar",
          "label": "Attensizefar",
          "description": "Attensizefar parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "sizeaffectedbyfov",
          "label": "Sizeaffectedbyfov",
          "description": "Sizeaffectedbyfov parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Point Sprite Page"
        },
        {
          "name": "dodeform",
          "label": "Dodeform",
          "description": "Dodeform parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "deformdata",
          "label": "Deformdata",
          "description": "Deformdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "targetsop",
          "label": "Targetsop",
          "description": "Targetsop parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptpath",
          "label": "Pcaptpath",
          "description": "Pcaptpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptdata",
          "label": "Pcaptdata",
          "description": "Pcaptdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "skelrootpath",
          "label": "Skelrootpath",
          "description": "Skelrootpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "mat",
          "label": "Mat",
          "description": "Mat parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        }
      ],
      "inputs": [],
      "outputs": [
        {
          "type": "MAT",
          "description": "MAT output",
          "index": 0
        }
      ],
      "examples": [],
      "tips": [],
      "related": [],
      "codeSnippets": [
        {
          "code": "postmultalpha",
          "language": "python"
        },
        {
          "code": "colormapextendu",
          "language": "python"
        },
        {
          "code": "colormapextendv",
          "language": "python"
        },
        {
          "code": "colormapextendw",
          "language": "python"
        },
        {
          "code": "colormapfilter",
          "language": "python"
        },
        {
          "code": "mipmaplinear",
          "language": "python"
        },
        {
          "code": "colormapanisotropy",
          "language": "python"
        },
        {
          "code": "offsetright",
          "language": "python"
        },
        {
          "code": "offsetbottom",
          "language": "python"
        },
        {
          "code": "sizingmodel",
          "language": "python"
        },
        {
          "code": "attenpscale",
          "language": "python"
        },
        {
          "code": "attensizenear",
          "language": "python"
        },
        {
          "code": "attensizefar",
          "language": "python"
        },
        {
          "code": "sizeaffectedbyfov",
          "language": "python"
        },
        {
          "code": "skelrootpath",
          "language": "python"
        },
        {
          "code": "Final Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "separatealphafunc",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "blendconstant",
          "language": "python"
        },
        {
          "code": "blendconstantr",
          "language": "python"
        },
        {
          "code": "blendconstantg",
          "language": "python"
        },
        {
          "code": "blendconstantb",
          "language": "python"
        },
        {
          "code": "blendconstanta",
          "language": "python"
        },
        {
          "code": "legacyalphabehavior",
          "language": "python"
        },
        {
          "code": "postmultalpha",
          "language": "python"
        },
        {
          "code": "pointcolorpremult",
          "language": "python"
        },
        {
          "code": "alreadypremult",
          "language": "python"
        },
        {
          "code": "premultinshader",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "depthwriting",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "alphathreshold",
          "language": "python"
        },
        {
          "code": "polygonoffset",
          "language": "python"
        },
        {
          "code": "polygonoffsetfactor",
          "language": "python"
        },
        {
          "code": "polygonoffsetunits",
          "language": "python"
        },
        {
          "code": "/project1/moviein1",
          "language": "python"
        },
        {
          "code": "/geo1/circle1",
          "language": "python"
        }
      ],
      "shortcuts": [],
      "performanceNotes": [
        "The cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.",
        "A Operator Family that reads, creates and modifies 3D points, polygons, lines, particles, surfaces, spheres and meatballs. Particles and point clouds are now done primarily on the GPU using TOPs.",
        "The OpenGL (pre-2022) or Vulkan (2022-) code that runs on the GPU and creates rendered images from polygons and textures. A shader is programmed in Text DATs and referenced by a GLSL Material or a GLSL TOP. Shaders are composed of up to three parts: Vertex Shader, Pixel Shader and Compute Shader.",
        "An Operator Family that creates, composites and modifies images, and reads/writes images and movies to/from files and the network. TOPs run on the graphics card's GPU."
      ],
      "subcategory": "General",
      "useCases": [
        "3D scene visualization",
        "Real-time graphics rendering",
        "Multi-pass rendering workflows",
        "Shadow and reflection generation"
      ],
      "url": "https://docs.derivative.ca/Experimental:Point_Sprite_MAT",
      "scraped": true,
      "scrapedAt": "2025-08-01T23:56:21.531Z",
      "parameterCount": 23
    },
    {
      "name": "Select",
      "fullName": "Select MAT",
      "category": "MAT",
      "description": "The Select MAT gets another material from any location in the project.\n\nselectMAT_Class\n\nRefer to the  Deform Article for more information on doing deforms in TouchDesigner.\n\nBlending is summing the color value of the pixel being drawn and the pixel currently present in the Color-Buffer. Blending is typically used to simulate Transparency.\n\t\tThe blending equation is:\n\t\tFinal Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)\n\nDepth-Testing is comparing the depth value of the pixel being drawn with the pixel currently in the Frame-Buffer. A pixel that is determined to be in-front of the pixel currently in the Frame-Buffer will be drawn over it. Pixels that are determined to be behind the pixel currently in the Frame-Buffer will not be drawn. Depth-Testing allows geometry in a 3D scene to occlude geometry behind it, and be occluded by geometry in-front of it regardless of the order the geometry was drawn.\n\nFor a more detailed description of Depth-Testing, refer to the Depth-Test article.\n\nAlpha-testing allows you to choose to draw or not draw a pixel based on its alpha value.\n\nThe wire-frame feature will render the geometry as wire-frame, using the actual primitive type used in the render. What this means is surfaces like Metaballs, NURBs and Beziers will become a wire-frame of the triangles/triangle-strips used to render them (since these types of primitives can't be natively rendered in OpenGL).\n\nThe cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.\n\nThis feature pushes the polygons back into space a tiny fraction. This is useful when you are rendering two polygons directly on-top of each other and are experiencing Z-Fighting. Refer to Polygon Depth Offset for more information. This is also an important feature when doing shadows.\n\nExtra Information for the Select MAT can be accessed via an Info CHOP.\n\nTouchDesigner Build: Latest\\n2021.100002018.28070before 2018.28070",
      "parameters": [
        {
          "name": "selectmat",
          "label": "Selectmat",
          "description": "Selectmat parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Select Page"
        },
        {
          "name": "dodeform",
          "label": "Dodeform",
          "description": "Dodeform parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "deformdata",
          "label": "Deformdata",
          "description": "Deformdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "targetsop",
          "label": "Targetsop",
          "description": "Targetsop parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptpath",
          "label": "Pcaptpath",
          "description": "Pcaptpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptdata",
          "label": "Pcaptdata",
          "description": "Pcaptdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "skelrootpath",
          "label": "Skelrootpath",
          "description": "Skelrootpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "mat",
          "label": "Mat",
          "description": "Mat parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        }
      ],
      "inputs": [],
      "outputs": [
        {
          "type": "MAT",
          "description": "MAT output",
          "index": 0
        }
      ],
      "examples": [],
      "tips": [],
      "related": [],
      "codeSnippets": [
        {
          "code": "skelrootpath",
          "language": "python"
        },
        {
          "code": "Final Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "separatealphafunc",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "blendconstant",
          "language": "python"
        },
        {
          "code": "blendconstantr",
          "language": "python"
        },
        {
          "code": "blendconstantg",
          "language": "python"
        },
        {
          "code": "blendconstantb",
          "language": "python"
        },
        {
          "code": "blendconstanta",
          "language": "python"
        },
        {
          "code": "legacyalphabehavior",
          "language": "python"
        },
        {
          "code": "postmultalpha",
          "language": "python"
        },
        {
          "code": "pointcolorpremult",
          "language": "python"
        },
        {
          "code": "alreadypremult",
          "language": "python"
        },
        {
          "code": "premultinshader",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "depthwriting",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "alphathreshold",
          "language": "python"
        },
        {
          "code": "polygonoffset",
          "language": "python"
        },
        {
          "code": "polygonoffsetfactor",
          "language": "python"
        },
        {
          "code": "polygonoffsetunits",
          "language": "python"
        },
        {
          "code": "/project1/moviein1",
          "language": "python"
        },
        {
          "code": "/geo1/circle1",
          "language": "python"
        }
      ],
      "shortcuts": [],
      "performanceNotes": [
        "The cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.",
        "A Operator Family that reads, creates and modifies 3D points, polygons, lines, particles, surfaces, spheres and meatballs. Particles and point clouds are now done primarily on the GPU using TOPs.",
        "The OpenGL (pre-2022) or Vulkan (2022-) code that runs on the GPU and creates rendered images from polygons and textures. A shader is programmed in Text DATs and referenced by a GLSL Material or a GLSL TOP. Shaders are composed of up to three parts: Vertex Shader, Pixel Shader and Compute Shader.",
        "An Operator Family that creates, composites and modifies images, and reads/writes images and movies to/from files and the network. TOPs run on the graphics card's GPU."
      ],
      "subcategory": "General",
      "useCases": [
        "3D scene visualization",
        "Real-time graphics rendering",
        "Multi-pass rendering workflows",
        "Shadow and reflection generation"
      ],
      "url": "https://docs.derivative.ca/Select_MAT",
      "scraped": true,
      "scrapedAt": "2025-08-01T23:56:21.504Z",
      "parameterCount": 8
    },
    {
      "name": "Switch",
      "fullName": "Switch MAT",
      "category": "MAT",
      "description": "The Switch MAT allows you to switch between multiple materials.\n\nswitchMAT_Class\n\nRefer to the  Deform Article for more information on doing deforms in TouchDesigner.\n\nDepth-Testing is comparing the depth value of the pixel being drawn with the pixel currently in the Frame-Buffer. A pixel that is determined to be in-front of the pixel currently in the Frame-Buffer will be drawn over it. Pixels that are determined to be behind the pixel currently in the Frame-Buffer will not be drawn. Depth-Testing allows geometry in a 3D scene to occlude geometry behind it, and be occluded by geometry in-front of it regardless of the order the geometry was drawn.\n\nFor a more detailed description of Depth-Testing, refer to the Depth-Test article.\n\nAlpha-testing allows you to choose to draw or not draw a pixel based on its alpha value.\n\nThe wire-frame feature will render the geometry as wire-frame, using the actual primitive type used in the render. What this means is surfaces like Metaballs, NURBs and Beziers will become a wire-frame of the triangles/triangle-strips used to render them (since these types of primitives can't be natively rendered in OpenGL).\n\nThe cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.\n\nThis feature pushes the polygons back into space a tiny fraction. This is useful when you are rendering two polygons directly on-top of each other and are experiencing Z-Fighting. Refer to Polygon Depth Offset for more information. This is also an important feature when doing shadows.\n\nExtra Information for the Switch MAT can be accessed via an Info CHOP.\n\nTouchDesigner Build: Latest\\n2021.100002018.28070before 2018.28070",
      "parameters": [
        {
          "name": "index",
          "label": "Index",
          "description": "Index parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Switch Page"
        },
        {
          "name": "dodeform",
          "label": "Dodeform",
          "description": "Dodeform parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "deformdata",
          "label": "Deformdata",
          "description": "Deformdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "targetsop",
          "label": "Targetsop",
          "description": "Targetsop parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptpath",
          "label": "Pcaptpath",
          "description": "Pcaptpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptdata",
          "label": "Pcaptdata",
          "description": "Pcaptdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "skelrootpath",
          "label": "Skelrootpath",
          "description": "Skelrootpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "mat",
          "label": "Mat",
          "description": "Mat parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        }
      ],
      "inputs": [
        {
          "type": "MAT",
          "description": "Input 0:  -",
          "index": 0
        }
      ],
      "outputs": [
        {
          "type": "MAT",
          "description": "MAT output",
          "index": 0
        }
      ],
      "examples": [],
      "tips": [],
      "related": [],
      "codeSnippets": [
        {
          "code": "skelrootpath",
          "language": "python"
        },
        {
          "code": "separatealphafunc",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "depthwriting",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "alphathreshold",
          "language": "python"
        },
        {
          "code": "polygonoffset",
          "language": "python"
        },
        {
          "code": "polygonoffsetfactor",
          "language": "python"
        },
        {
          "code": "polygonoffsetunits",
          "language": "python"
        },
        {
          "code": "/project1/moviein1",
          "language": "python"
        },
        {
          "code": "/geo1/circle1",
          "language": "python"
        }
      ],
      "shortcuts": [],
      "performanceNotes": [
        "The cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.",
        "A Operator Family that reads, creates and modifies 3D points, polygons, lines, particles, surfaces, spheres and meatballs. Particles and point clouds are now done primarily on the GPU using TOPs.",
        "An Operator Family that creates, composites and modifies images, and reads/writes images and movies to/from files and the network. TOPs run on the graphics card's GPU."
      ],
      "subcategory": "General",
      "useCases": [
        "3D scene visualization",
        "Real-time graphics rendering",
        "Multi-pass rendering workflows",
        "Shadow and reflection generation"
      ],
      "url": "https://docs.derivative.ca/Switch_MAT",
      "scraped": true,
      "scrapedAt": "2025-08-01T23:56:21.545Z",
      "parameterCount": 8
    },
    {
      "name": "Texture Sampling Parameters",
      "fullName": "Texture Sampling Parameters",
      "category": "MAT",
      "description": "The Texture Sampling parameters can be accessed anywhere a TOP is being sampled for use in a material or shader. To open these parameters, click the \"+\" button to the right of the parameter. The parameter portion of the internal names depends on what map parameter these parameters are related to. For example for the colormap parameter, extendu would be colormapextendu.\n\nExtend U /parameterextendu - Sets the extend mode for the U coordiate/direction. Refer to Texture Extend Modes for more information.\n\nExtend V /parameterextendv - Sets the extend mode for the V coordiate/direction.  Refer to Texture Extend Modes for more information.\n\nExtend W /parameterextendw - Sets the extend mode for the W coordiate/direction. Only used for 3D Texture.  Refer to Texture Extend Modes for more information.\n\nFilter /parameterfilter - Controls how this TOP is filtered when it's gets used. See Texture Filtering for more information.\n\nAnisotropic Filter /parameteranisotropy - Controls the level of anisotropic filtering used on the TOP when it's sampled. This results in more samples when sampling a TOP, increasing the texturing quality. Refer to Anisotropic Filtering for more information.\n\nTexture Coord /parametercoord - Determines which set of texture coordinates to use (which texture layer).\n\nCoord Interpolation /parametercoordinterp - Adjusts the interpolation of the texture coordinated between Perspective Correct and Linear(no perspective).",
      "parameters": [],
      "inputs": [],
      "outputs": [
        {
          "type": "MAT",
          "description": "MAT output",
          "index": 0
        }
      ],
      "examples": [],
      "tips": [],
      "related": [],
      "codeSnippets": [
        {
          "code": "/parameterextendu",
          "language": "python"
        },
        {
          "code": "/parameterextendv",
          "language": "python"
        },
        {
          "code": "/parameterextendw",
          "language": "python"
        },
        {
          "code": "/parameterfilter",
          "language": "python"
        },
        {
          "code": "/parameteranisotropy",
          "language": "python"
        },
        {
          "code": "/parametercoord",
          "language": "python"
        },
        {
          "code": "/parametercoordinterp",
          "language": "python"
        }
      ],
      "shortcuts": [],
      "performanceNotes": [
        "An Operator Family that creates, composites and modifies images, and reads/writes images and movies to/from files and the network. TOPs run on the graphics card's GPU."
      ],
      "subcategory": "Textures",
      "useCases": [
        "Image enhancement and correction",
        "Blur and sharpening effects",
        "Edge detection and analysis",
        "Custom convolution operations"
      ],
      "url": "https://docs.derivative.ca/Texture_Sampling_Parameters",
      "scraped": true,
      "scrapedAt": "2025-08-01T23:56:21.589Z",
      "parameterCount": 0
    },
    {
      "name": "Wireframe",
      "fullName": "Wireframe MAT",
      "category": "MAT",
      "description": "The Wireframe MAT renders the edges of polygons and curves as lines.\n\nwireframeMAT_Class\n\nRefer to the  Deform Article for more information on doing deforms in TouchDesigner.\n\nBlending is summing the color value of the pixel being drawn and the pixel currently present in the Color-Buffer. Blending is typically used to simulate Transparency.\n\t\tThe blending equation is:\n\t\tFinal Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)\n\nDepth-Testing is comparing the depth value of the pixel being drawn with the pixel currently in the Frame-Buffer. A pixel that is determined to be in-front of the pixel currently in the Frame-Buffer will be drawn over it. Pixels that are determined to be behind the pixel currently in the Frame-Buffer will not be drawn. Depth-Testing allows geometry in a 3D scene to occlude geometry behind it, and be occluded by geometry in-front of it regardless of the order the geometry was drawn.\n\nFor a more detailed description of Depth-Testing, refer to the Depth-Test article.\n\nAlpha-testing allows you to choose to draw or not draw a pixel based on its alpha value.\n\nThe wire-frame feature will render the geometry as wire-frame, using the actual primitive type used in the render. What this means is surfaces like Metaballs, NURBs and Beziers will become a wire-frame of the triangles/triangle-strips used to render them (since these types of primitives can't be natively rendered in OpenGL).\n\nThe cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.\n\nThis feature pushes the polygons back into space a tiny fraction. This is useful when you are rendering two polygons directly on-top of each other and are experiencing Z-Fighting. Refer to Polygon Depth Offset for more information. This is also an important feature when doing shadows.\n\nExtra Information for the Wireframe MAT can be accessed via an Info CHOP.\n\nTouchDesigner Build: Latest\\n2021.100002018.28070before 2018.28070",
      "parameters": [
        {
          "name": "color",
          "label": "Color",
          "description": "Color parameter",
          "type": "RGB",
          "default": "",
          "range": null,
          "options": null,
          "section": "Wireframe Page"
        },
        {
          "name": "alpha",
          "label": "Alpha",
          "description": "Alpha parameter",
          "type": "Menu",
          "default": "",
          "range": null,
          "options": [
            {
              "label": "Already",
              "value": "Pre",
              "description": "Multiplied By AlphaÂ alreadypremult -"
            }
          ],
          "section": "Wireframe Page"
        },
        {
          "name": "wireframemode",
          "label": "Wireframemode",
          "description": "Wireframemode parameter",
          "type": "Menu",
          "default": "",
          "range": null,
          "options": null,
          "section": "Wireframe Page"
        },
        {
          "name": "linewidth",
          "label": "Linewidth",
          "description": "Linewidth parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Wireframe Page"
        },
        {
          "name": "dodeform",
          "label": "Dodeform",
          "description": "Dodeform parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "deformdata",
          "label": "Deformdata",
          "description": "Deformdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "targetsop",
          "label": "Targetsop",
          "description": "Targetsop parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptpath",
          "label": "Pcaptpath",
          "description": "Pcaptpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "pcaptdata",
          "label": "Pcaptdata",
          "description": "Pcaptdata parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "skelrootpath",
          "label": "Skelrootpath",
          "description": "Skelrootpath parameter",
          "type": "File",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        },
        {
          "name": "mat",
          "label": "Mat",
          "description": "Mat parameter",
          "type": "Float",
          "default": "",
          "range": null,
          "options": null,
          "section": "Deform Page"
        }
      ],
      "inputs": [],
      "outputs": [
        {
          "type": "MAT",
          "description": "MAT output",
          "index": 0
        }
      ],
      "examples": [],
      "tips": [],
      "related": [],
      "codeSnippets": [
        {
          "code": "wireframemode",
          "language": "python"
        },
        {
          "code": "tesselatedwireframe",
          "language": "python"
        },
        {
          "code": "topologywireframe",
          "language": "python"
        },
        {
          "code": "skelrootpath",
          "language": "python"
        },
        {
          "code": "Final Pixel Value = (Source Blend * Source Color) + (Dest Blend * Destination Color)",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "separatealphafunc",
          "language": "python"
        },
        {
          "code": "revsubtract",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "constantcol",
          "language": "python"
        },
        {
          "code": "omconstantcol",
          "language": "python"
        },
        {
          "code": "omconstanta",
          "language": "python"
        },
        {
          "code": "blendconstant",
          "language": "python"
        },
        {
          "code": "blendconstantr",
          "language": "python"
        },
        {
          "code": "blendconstantg",
          "language": "python"
        },
        {
          "code": "blendconstantb",
          "language": "python"
        },
        {
          "code": "blendconstanta",
          "language": "python"
        },
        {
          "code": "legacyalphabehavior",
          "language": "python"
        },
        {
          "code": "postmultalpha",
          "language": "python"
        },
        {
          "code": "pointcolorpremult",
          "language": "python"
        },
        {
          "code": "alreadypremult",
          "language": "python"
        },
        {
          "code": "premultinshader",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "depthwriting",
          "language": "python"
        },
        {
          "code": "lessorequal",
          "language": "python"
        },
        {
          "code": "greaterorequal",
          "language": "python"
        },
        {
          "code": "alphathreshold",
          "language": "python"
        },
        {
          "code": "polygonoffset",
          "language": "python"
        },
        {
          "code": "polygonoffsetfactor",
          "language": "python"
        },
        {
          "code": "polygonoffsetunits",
          "language": "python"
        },
        {
          "code": "/project1/moviein1",
          "language": "python"
        },
        {
          "code": "/geo1/circle1",
          "language": "python"
        }
      ],
      "shortcuts": [],
      "performanceNotes": [
        "OpenGL Tessellated Wire FrameÂ tesselatedwireframe - This wireframe follows what the actual rendered geometry on the GPU ends up being. This is usually just wired-triangles for any surface, regardless of the original primitive type.",
        "The cull face parameter will cull faces from the render output. This can be used as an optimization or sometimes to remove artifacts. See Back-Face Culling for more infomation.",
        "The Graphics Processing Unit. This is the high-speed, many-core processor of the graphics card/chip that takes geometry, images and data from the CPU and creates images and processed data.",
        "A Operator Family that reads, creates and modifies 3D points, polygons, lines, particles, surfaces, spheres and meatballs. Particles and point clouds are now done primarily on the GPU using TOPs.",
        "The OpenGL (pre-2022) or Vulkan (2022-) code that runs on the GPU and creates rendered images from polygons and textures. A shader is programmed in Text DATs and referenced by a GLSL Material or a GLSL TOP. Shaders are composed of up to three parts: Vertex Shader, Pixel Shader and Compute Shader.",
        "An Operator Family that creates, composites and modifies images, and reads/writes images and movies to/from files and the network. TOPs run on the graphics card's GPU."
      ],
      "subcategory": "Shaders",
      "useCases": [
        "3D scene visualization",
        "Real-time graphics rendering",
        "Multi-pass rendering workflows",
        "Shadow and reflection generation"
      ],
      "url": "https://docs.derivative.ca/Wireframe_MAT",
      "scraped": true,
      "scrapedAt": "2025-08-01T23:56:21.620Z",
      "parameterCount": 11
    }
  ]
}